"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueuedConversation = exports.ConversationQueue = void 0;
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const audio = __importStar(require("./audio"));
const errors = __importStar(require("./errors"));
const rest = __importStar(require("./rest-api"));
const sip = __importStar(require("./sip"));
const log_1 = require("./log");
const transcription_1 = require("./transcription");
const helpers_1 = require("./helpers");
/**
 * Manages planned conversations.
 *
 * A conversation may be _enqueued_, that is, planned to execute in a specific time frame.
 * When the conversation is to be executed, a `"ready"` event is fired on this object,
 * that gets passed a {@link Conversation} object to populate its input and run.
 *
 * The queue is stored on the Dasha platform. To associate an enqueued conversation
 * with its data, each conversation is assigned a _key_.
 *
 * @example running enqueued conversations
 * ```typescript
 * application.queue.on("ready", async (key, conversation) => {
 *   conversation.input = getInput(key);
 *   const result = await conversation.execute();
 * });
 * ```
 *
 * Sometimes, the conversation can be removed from the queue by the Dasha platform itself.
 * In that case, a `"rejected"` event is fired.
 *
 * @example conversation rejection
 * ```typescript
 * application.queue.on("rejected", (key, error) => {
 *   console.log(`conversation with key ${key} was rejected`, error);
 * });
 * ```
 *
 * There is an important caveat with the incoming SIP conversations.
 * They get placed in the queue automatically, by the Dasha platform itself.
 * To discern them from the manually-enqueued conversations, and to get the additional
 * SIP info (e.g. the SIP user and domain of the conversation partner),
 * the `"ready"` event has an extra argument of type {@link QueuedConversationInfo}.
 *
 * @example using SIP data in a conversation
 * ```typescript
 * application.queue.on("ready", (key, conversation, info) => {
 *   assert(info.sip !== undefined);
 *   conversation.input.from = `${info.fromUser}@${info.fromDomain}`;
 *   await conversation.execute();
 * });
 * ```
 */
class ConversationQueue extends eventemitter3_1.default {
    /** @internal */
    constructor(application, log) {
        super();
        this._ignoredJobKeys = new Set();
        this._activeConversationsByJobKey = new Map();
        this._isDisposed = false;
        this._handleJobTimedOut = (_jobId, jobKey) => {
            if (this._ignoredJobKeys.has(jobKey)) {
                this._ignoredJobKeys.delete(jobKey);
                return;
            }
            const conv = this._activeConversationsByJobKey.get(jobKey);
            if (conv !== undefined) {
                conv._timedOut = true;
                this._activeConversationsByJobKey.delete(jobKey);
            }
            this._log.warn(`JobId: ${_jobId} with key ${jobKey} timed out`);
            this.emit("timeout", jobKey, _jobId);
        };
        this._handleJobRejected = (_jobId, jobKey, data) => {
            if (this._ignoredJobKeys.has(jobKey)) {
                this._ignoredJobKeys.delete(jobKey);
                return;
            }
            const conv = this._activeConversationsByJobKey.get(jobKey);
            if (conv !== undefined) {
                conv._rejected = true;
                conv._rejectedReason = new errors.ConversationRejectedError(data, _jobId, jobKey);
                this._activeConversationsByJobKey.delete(jobKey);
            }
            if ((conv === null || conv === void 0 ? void 0 : conv._rejectedByUser) !== true) {
                this.emit("rejected", jobKey, (0, log_1.logAndReturn)(this._log, new errors.ConversationRejectedError(data, _jobId, jobKey)), _jobId);
            }
        };
        this._handleJobStarting = async (jobId, jobKey, jobData) => {
            if (this._ignoredJobKeys.has(jobKey)) {
                this._ignoredJobKeys.delete(jobKey);
                return;
            }
            const conv = new QueuedConversation(this._application, jobId, jobKey, this._log);
            this._activeConversationsByJobKey.set(jobKey, conv);
            const sipInfo = sip._extractSipInfo(jobData);
            const providedData = (0, helpers_1.tryGetObjectField)(jobData, "ProvidedData");
            conv.input = (providedData !== null && providedData !== void 0 ? providedData : {});
            this.emit("ready", jobKey, conv, { sip: sipInfo });
            setTimeout(() => {
                if (conv._started || conv._rejected || conv._rejectedByUser)
                    return;
                conv._timedOut = true;
                this._application._rejectJob(jobId).catch((error) => this.emit("error", error));
            }, 2 * 60 * 1000);
        };
        this._handleJobCompleted = (_jobId, jobKey) => {
            this._activeConversationsByJobKey.delete(jobKey);
        };
        this._handleJobFailed = (_jobId, jobKey) => {
            this._activeConversationsByJobKey.delete(jobKey);
        };
        this._application = application;
        this._log = log.child({});
        application.on("_jobTimedOut", this._handleJobTimedOut);
        application.on("_jobRejected", this._handleJobRejected);
        application.on("_jobStarting", this._handleJobStarting);
        application.on("_jobCompleted", this._handleJobCompleted);
        application.on("_jobFailed", this._handleJobFailed);
    }
    /** @internal */
    _dispose() {
        if (this._isDisposed)
            return;
        this._isDisposed = true;
        this.removeAllListeners();
        this._application.off("_jobTimedOut", this._handleJobTimedOut);
        this._application.off("_jobRejected", this._handleJobRejected);
        this._application.off("_jobStarting", this._handleJobStarting);
        this._application.off("_jobCompleted", this._handleJobCompleted);
        this._application.off("_jobFailed", this._handleJobFailed);
    }
    /**
     * Push a new conversation into the queue.
     *
     * @param key a conversation key that can be used to associate data
     * @param options.after the earliest point in time the conversation can run at
     * @param options.before the latest point in time the conversation can run at
     * @returns Object with internal backend jobId
     * @example enqueue a conversation to within an hour
     * ```typescript
     * application.queue.push("key", {
     *   after: new Date(),
     *   before: new Date(Date.now() + 60 * 60 * 1000)
     * });
     * ```
     */
    async push(key, options) {
        var _a, _b, _c, _d;
        const after = (_a = options === null || options === void 0 ? void 0 : options.after) !== null && _a !== void 0 ? _a : new Date();
        const before = (_b = options === null || options === void 0 ? void 0 : options.before) !== null && _b !== void 0 ? _b : new Date(after.valueOf() + 5 * 60 * 1000);
        const priority = (_c = options === null || options === void 0 ? void 0 : options.priority) !== null && _c !== void 0 ? _c : 1;
        const input = (_d = options === null || options === void 0 ? void 0 : options.input) !== null && _d !== void 0 ? _d : {};
        const job = await this._application._enqueueJob(key, { after: after, before: before, priority: priority, input: (input !== null && input !== void 0 ? input : {}) });
        this.emit("_conversationPushed", job.jobId);
        this._log.info(`conversation enqueued: ${key} with internal id ${job.jobId}`, { jobKey: key });
        return { jobId: job.jobId };
    }
    /**
     * Get current queue length at the server side.
     */
    async length() {
        var _a;
        const api = new rest.DiagnosticsApi(this._application.account, this._log);
        const queueStates = await api.getQueueStates();
        const queueState = queueStates.applicationGroups.find((x) => x.applicationName === this._application.applicationName &&
            x.groupId === this._application.groupId);
        return (_a = queueState === null || queueState === void 0 ? void 0 : queueState.length) !== null && _a !== void 0 ? _a : 0;
    }
    /** @internal */
    _ignore(jobKey) {
        this._ignoredJobKeys.add(jobKey);
    }
    async waitUntilCurrentProcessed(options) {
        var _a, _b;
        const sleep = (ms) => new Promise((resolve) => {
            setTimeout(resolve, ms);
        });
        const sleepInMs = (_a = options === null || options === void 0 ? void 0 : options.checkPeriodInMs) !== null && _a !== void 0 ? _a : 1000;
        while (this._activeConversationsByJobKey.size > 0) {
            this._log.info(`There are ${this._activeConversationsByJobKey.size} jobs waiting to be completed`);
            if ((_b = options === null || options === void 0 ? void 0 : options.cancelationToken) === null || _b === void 0 ? void 0 : _b.isCanceled) {
                return false;
            }
            await sleep(sleepInMs);
        }
        this._log.info(`All processing jobs completed. ${this._activeConversationsByJobKey.size} jobs`);
        return true;
    }
}
exports.ConversationQueue = ConversationQueue;
class QueuedConversation extends eventemitter3_1.default {
    /** @internal */
    constructor(application, jobId, jobKey, log) {
        super();
        this.input = {};
        this.audio = audio._makeDefaultAudioConfig();
        this.sip = sip._makeDefaultSipConfig();
        /** @internal */ this._started = false;
        /** @internal */ this._timedOut = false;
        /** @internal */ this._rejected = false;
        /** @internal */ this._rejectedByUser = false;
        /** @internal */ this._completed = false;
        /** @internal */ this._running = false;
        this._transcription = [];
        this._transcriptionParser = new transcription_1.TranscriptionParser();
        /** @internal */ this._dynamicTools = {};
        this._application = application;
        this._jobId = jobId;
        this._jobKey = jobKey;
        this.log = log.child({
            label: `conv:${this._jobId.slice(-6)}`,
            jobId,
            jobKey,
        });
        this.log.info(`jobId: ${this._jobId}`);
        this.log.info(`jobKey: ${this._jobKey}`);
        application._bindConversation(jobId, this);
        this._transcriptionParser.on("transcription", (transcription) => {
            this.emit("transcription", transcription);
            this._transcription.push(transcription);
        });
    }
    setDynamicToolRaw(options, handler) {
        if (this._started) {
            this.log.warn("Dynamic tool set after conversation has already been started is ignored");
            return Promise.resolve();
        }
        this._dynamicTools[options.name] = {
            description: options.description,
            name: options.name,
            schema: options.schema,
            handle: handler
        };
        return Promise.resolve();
    }
    setDynamicTool(options, handler) {
        if (this._started) {
            this.log.warn("Dynamic tool set after conversation has already been started is ignored");
            return Promise.resolve();
        }
        this._dynamicTools[options.name] = {
            description: options.description,
            name: options.name,
            schema: JSON.stringify(options.schema),
            handle: handler
        };
        return Promise.resolve();
    }
    /**
     *  Explicitly mark this conversation as not being executed, freeing up server-side resources
     */
    async ignore() {
        if (this._started) {
            (0, log_1.logAndThrow)(this.log, new errors.Error("conversation has already been started"));
        }
        this.log.info(`Job ignored by user`);
        this._rejectedByUser = true;
        await this._application._rejectJob(this._jobId);
    }
    get jobId() {
        return this._jobId;
    }
    get jobKey() {
        return this._jobKey;
    }
    async execute(options) {
        var _a, _b, _c;
        if (this._timedOut) {
            (0, log_1.logAndThrow)(this.log, new errors.TimeoutError("conversation timed out"));
        }
        if (this._rejectedByUser) {
            (0, log_1.logAndThrow)(this.log, new errors.Error("conversation has already been ignored"));
        }
        if (this._rejected) {
            (0, log_1.logAndThrow)(this.log, this._rejectedReason);
        }
        if (this._started) {
            (0, log_1.logAndThrow)(this.log, new errors.Error("conversation has already been started"));
        }
        this.emit("_conversationStarting", this._application.applicationId, this._jobId, this.input);
        this._started = true;
        this.log.info("conversation started");
        let configName;
        let connection;
        if (this._application.connectionProvider !== undefined) {
            this.log.warn("connection providers are deprecated and will be removed in the future");
            connection = await this._application._executeConnectionProvider(this);
            connection._sessionConfig.tts = await this._application._executeTtsDispatcher(this);
            connection._sessionConfig.stt = await this._application._executeSttDispatcher(this);
            configName = (await this._application._addSessionConfig(connection._sessionConfig))
                .configName;
        }
        else {
            const executionOptions = { channel: (_a = options === null || options === void 0 ? void 0 : options.channel) !== null && _a !== void 0 ? _a : "audio" };
            configName = (await this._application._configureSession(this, executionOptions)).configName;
        }
        if ((_b = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _b === void 0 ? void 0 : _b.isCanceled) {
            await this._application._rejectJob(this._jobId);
            options.cancelToken._throwIfCanceled(this.log);
        }
        connection === null || connection === void 0 ? void 0 : connection._init(this._jobId);
        await this._application._acceptJob(this._jobId, {
            sessionConfigName: configName,
            data: this.input,
        });
        (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c._throwIfCanceled(this.log);
        return new Promise((resolve, reject) => {
            var _a;
            (_a = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _a === void 0 ? void 0 : _a._onCancel(this.log, reject);
            const unsubscribe = () => {
                this._application.off("_jobFailed", handleJobFailed);
                this._application.off("_jobCompleted", handleJobCompleted);
                this._application.off("_jobRecordIdReady", handleJobRecordIdReady);
                this._application.off("_jobAdditionalInformation", handleJobAdditionalInformation);
                this._application.off("_jobEvent", handleJobEvent);
            };
            const handleJobFailed = (jobId, _jobKey, data) => {
                if (jobId !== this._jobId)
                    return;
                unsubscribe();
                reject((0, log_1.logAndReturn)(this.log, new errors.ConversationError(data)));
            };
            const handleJobCompleted = (jobId, _jobKey, data) => {
                var _a, _b, _c, _d;
                if (jobId !== this._jobId)
                    return;
                this._completed = true;
                this._running = false;
                unsubscribe();
                this.log.info("conversation complete");
                if (this._recordingUrl !== undefined) {
                    this.log.info(`recording available at ${this._recordingUrl}`);
                }
                if (this._recordingUrls !== undefined && this._recordingUrls.length > 0) {
                    this.log.info(`recordings available at ${this._recordingUrls.join(" ")}`);
                }
                const result = {
                    output: data,
                    transcription: this._transcription.sort((a, b) => +a.startTime - +b.startTime),
                    recordingUrl: this._recordingUrl,
                    recordingUrls: this._recordingUrls,
                    startTime: (_a = this._additionalInformation) === null || _a === void 0 ? void 0 : _a.jobStarted,
                    endTime: (_b = this._additionalInformation) === null || _b === void 0 ? void 0 : _b.jobEnded,
                    tracking: (_c = this._additionalInformation) === null || _c === void 0 ? void 0 : _c.tracking,
                    duration: (_d = this._additionalInformation) === null || _d === void 0 ? void 0 : _d.duration
                };
                this.emit("_conversationCompleted", this._jobId, result);
                resolve(result);
            };
            const handleJobRecordIdReady = (jobId, recordId, recordIds) => {
                if (jobId !== this._jobId)
                    return;
                this._recordingUrl = this._application._getRecordingUrl(recordId);
                if (recordIds !== undefined) {
                    this._recordingUrls = recordIds.map(x => this._application._getRecordingUrl(x));
                }
            };
            const handleJobAdditionalInformation = (jobId, data) => {
                if (jobId !== this._jobId)
                    return;
                this._additionalInformation = data;
            };
            const handleJobEvent = (jobId, jobEvent) => {
                if (jobId !== this._jobId)
                    return;
                this._running = true;
                const isObject = (x) => typeof x === "object" && x !== null;
                // a hack for https://gitlab.dasha.ai/dasha.ai/platform-team/platform/-/issues/821
                // TODO: a proper way to report #connect() errors to the application
                if (isObject(jobEvent) && isObject(jobEvent.msg)) {
                    if (jobEvent.msg.msgId === "FailedOpenSessionChannelMessage") {
                        const logDetails = { msg: jobEvent.msg };
                        this.log.warn(`#connect() call failed: ${jobEvent.msg.reason}`, logDetails);
                        this.log.warn(`${jobEvent.msg.details}`, logDetails);
                    }
                }
                this.emit("debugLog", jobEvent);
                this._transcriptionParser.push(jobEvent);
            };
            this._application.on("_jobFailed", handleJobFailed);
            this._application.on("_jobCompleted", handleJobCompleted);
            this._application.on("_jobRecordIdReady", handleJobRecordIdReady);
            this._application.on("_jobAdditionalInformation", handleJobAdditionalInformation);
            this._application.on("_jobEvent", handleJobEvent);
        });
    }
    async sendEvent(eventName, eventValue) {
        if (this._completed) {
            throw new errors.Error("Can't send event after conversation has already been completed");
        }
        if (this._rejected) {
            throw new errors.Error("Can't send event after conversation has already been rejected");
        }
        if (this._timedOut) {
            throw new errors.Error("Can't send event after conversation has already timed out");
        }
        if (this._rejectedByUser) {
            throw new errors.Error("Can't send event after conversation has already been ignored");
        }
        if (this._running) {
            await this._application._sendEvent(this._jobId, eventName, eventValue);
            return;
        }
        return new Promise((resolve, reject) => {
            const cleanup = () => {
                this.removeListener("_conversationCompleted", onCompleted);
                this.off("debugLog", checkRunning);
            };
            const onCompleted = () => {
                reject(new errors.Error("conversation completed before event could be sent"));
                cleanup();
            };
            const checkRunning = () => {
                if (this._running) {
                    this._application._sendEvent(this._jobId, eventName, eventValue)
                        .then(() => resolve())
                        .catch(reject);
                    cleanup();
                }
            };
            this.on("debugLog", checkRunning);
            this.once("_conversationCompleted", onCompleted);
        });
    }
}
exports.QueuedConversation = QueuedConversation;
//# sourceMappingURL=queue.js.map