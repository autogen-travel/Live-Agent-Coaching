import EventEmitter from "eventemitter3";
import * as errors from "./errors";
import { Account } from "./account";
import { Conversation } from "./conversation";
/**
 * Create a {@link MultichannelChatManager} instance to use with a conversation.
 *
 * @param conversation a conversation to connect to
 * @param options.account Dasha account to use. Must be the same as the application's account.
 *   If not set, uses the {@link getCurrentAccountName | current account}.
 */
export declare function createMultichannelChat(conversation: Conversation, options?: {
    account?: Account;
}): Promise<MultichannelChatManager>;
export interface IMultichannelChat extends EventEmitter<{
    text: [text: string];
    close: [];
    error: [error: errors.Error];
    closed: [];
    gluedText: [text: string];
}> {
    sendText(text: string): Promise<void>;
    sendTextAndReceiveResponse(text: string): Promise<string>;
    close(): Promise<void>;
}
export declare class MultichannelChatManager extends EventEmitter<{
    error: [error: errors.Error];
    open: [endpoint: string, channelid: string];
}> {
    protected account: Account;
    private _jobId;
    private _textProtocolClient;
    private _messageStream;
    private _channelMap;
    /**
     * Create a {@link Chat} instance to use with an application.
     *
     * @param account Dasha account to use. Must be the same as the application's account.
     */
    constructor(account: Account, conversation?: Conversation);
    close(): Promise<void>;
    sendOpen(channelId: string): Promise<IMultichannelChat>;
    sendFailed(channelId: string): Promise<void>;
    private _handleText;
    private _handleClose;
    private _handleErorr;
    private _handleWait;
    private _handleClosed;
    private _handleOpen;
}
