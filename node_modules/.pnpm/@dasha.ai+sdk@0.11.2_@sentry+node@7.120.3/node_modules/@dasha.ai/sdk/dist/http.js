"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAxiosInstance = createAxiosInstance;
const axios_1 = __importDefault(require("axios"));
const axios_retry_1 = __importDefault(require("axios-retry"));
/**
 * Create an AxiosInstance with the proxy agents already set up.
 *
 * @internal
 */
function createAxiosInstance(config, log, onMaxRetryTimesExceeded) {
    const instance = axios_1.default.create({
        ...config,
    });
    (0, axios_retry_1.default)(instance, {
        retries: 3,
        onMaxRetryTimesExceeded: onMaxRetryTimesExceeded,
        onRetry: (retryCount, error) => {
            log === null || log === void 0 ? void 0 : log.warn(`Retry REST call ${retryCount}`);
        },
    });
    const proxyPromise = Promise.resolve().then(() => __importStar(require("proxy-agent"))).then(({ ProxyAgent }) => {
        instance.defaults.proxy = false;
        instance.defaults.httpAgent = new ProxyAgent();
        instance.defaults.httpsAgent = new ProxyAgent();
    })
        .catch(() => null);
    const dnsPromise = Promise.resolve().then(() => __importStar(require("dns"))).then((dns) => {
        const dnsResolver = (hostname, 
        // eslint-disable-next-line @typescript-eslint/ban-types
        options, callback) => {
            dns.lookup(hostname, { all: true, family: 4 }, (err, addresses) => {
                if (err) {
                    callback(err, [], 4);
                }
                if (addresses === undefined || addresses == null) {
                    callback(new Error(`No address found for DNS resolution on ${hostname}`), [], 4);
                    return;
                }
                if (Array.isArray(addresses)) {
                    const dAddresses = addresses.filter((x) => x !== undefined && x !== null);
                    if (dAddresses.length === 0) {
                        callback(new Error(`No address found for DNS resolution on ${hostname}`), [], 4);
                        return;
                    }
                    const idx = Math.floor(Math.random() * dAddresses.length * 2) % dAddresses.length;
                    callback(err, {
                        address: dAddresses[idx].address,
                        family: 4,
                    }, 4);
                    return;
                }
                callback(err, {
                    address: addresses,
                    family: 4,
                }, 4);
            });
        };
        instance.defaults.lookup = dnsResolver;
    })
        .catch(() => null);
    // do not run any requests until the optional dependency is resolved
    const interceptorHandle = instance.interceptors.request.use(async (config) => {
        await proxyPromise;
        await dnsPromise;
        config.proxy = false;
        config.httpAgent = instance.defaults.httpAgent;
        config.httpsAgent = instance.defaults.httpsAgent;
        config.lookup = instance.defaults.lookup;
        axios_1.default.interceptors.request.eject(interceptorHandle);
        return config;
    });
    return instance;
}
//# sourceMappingURL=http.js.map