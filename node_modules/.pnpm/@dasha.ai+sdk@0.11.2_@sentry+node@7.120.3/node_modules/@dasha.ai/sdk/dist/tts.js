"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._makeTtsSessionConfig = _makeTtsSessionConfig;
exports.synthesize = synthesize;
exports.cloneAsync = cloneAsync;
exports.deleteCloneAsync = deleteCloneAsync;
exports.updateCloneAsync = updateCloneAsync;
exports.listVoicesAsync = listVoicesAsync;
const account_1 = require("./account");
const log_1 = require("./log");
const rest = __importStar(require("./rest-api"));
function _toConfigName(providerName, log) {
    switch (providerName) {
        case "default":
            return "Default";
        case "custom":
            return "ExternalClient";
        case "dasha":
            return "Dasha";
        default:
            // fallback for providers not defined by the current SDK version
            log.warn(`unknown tts provider name: ${providerName}`);
            return providerName;
    }
}
/** @internal */
function _makeTtsSessionConfig(providerName, log) {
    return { type: "synthesized", configName: _toConfigName(providerName, log) };
}
async function synthesize(text, voice, options) {
    var _a;
    const account = (_a = options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.TtsApi(account, log);
    const data = await api.synthesize({
        text,
        voiceInfo: voice,
        configName: _toConfigName(options.providerName, log),
    });
    return data;
}
async function cloneAsync(request, audios, options) {
    var _a;
    const account = (_a = options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.TtsApi(account, log);
    const data = await api.cloneAsync(request, audios);
    return data;
}
async function deleteCloneAsync(id, options) {
    var _a;
    const account = (_a = options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.TtsApi(account, log);
    const data = await api.deleteCloneAsync(id);
    return data;
}
async function updateCloneAsync(id, dto, options) {
    var _a;
    const account = (_a = options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.TtsApi(account, log);
    const data = await api.updateCloneAsync(id, dto);
    return data;
}
async function listVoicesAsync(filter, options) {
    var _a;
    const account = (_a = options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.TtsApi(account, log);
    const response = await api.listVoicesAsync(filter);
    return response;
}
//# sourceMappingURL=tts.js.map