"use strict";
// TODO: docs on what a group actually is
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addPrompt = addPrompt;
exports.getPrompt = getPrompt;
exports.addPromptVersion = addPromptVersion;
exports.listPrompts = listPrompts;
exports.listPromptVersions = listPromptVersions;
exports.deletePromptVersion = deletePromptVersion;
exports.deletePrompt = deletePrompt;
exports.updatePrompt = updatePrompt;
exports.callPrompt = callPrompt;
const account_1 = require("./account");
const log_1 = require("./log");
const rest = __importStar(require("./rest-api"));
/**
 * Add new prompt
 *
 * @returns the properties of a newly-created prompt
 */
async function addPrompt(prompt, options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.PromptApi(account, log);
    const result = await api.addPrompt(prompt);
    return result;
}
/**
 * Add new prompt
 *
 * @returns the properties of a newly-created prompt
 */
async function getPrompt(id, options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.PromptApi(account, log);
    const result = await api.getPrompt(id);
    return result;
}
/**
 * Add new prompt version
 *
 * @returns the properties of a newly-created prompt
 */
async function addPromptVersion(promptId, version, options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.PromptApi(account, log);
    const result = await api.addPromptVersion(promptId, version);
    return result;
}
/**
 * List prompts
 *
 * @returns list of prompts with options
 */
async function listPrompts(skip, take, options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.PromptApi(account, log);
    const result = await api.listPrompts(skip, take);
    return result;
}
/**
 * List prompt versions
 *
 * @returns list of prompt version with options
 */
async function listPromptVersions(promptId, skip, take, options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.PromptApi(account, log);
    const result = await api.listPromptVersions(promptId, skip, take);
    return result;
}
/**
 * Delete prompt version
 *
 * @returns deleted entry
 */
async function deletePromptVersion(versionId, options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.PromptApi(account, log);
    const result = await api.deletePromptVersion(versionId);
    return result;
}
/**
 * Delete prompt
 *
 * @returns deleted entry
 */
async function deletePrompt(promptId, options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.PromptApi(account, log);
    const result = await api.deletePrompt(promptId);
    return result;
}
/**
 * Delete prompt
 *
 * @returns deleted entry
 */
async function updatePrompt(promptId, dto, options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.PromptApi(account, log);
    const result = await api.updatePrompt(promptId, dto);
    return result;
}
/**
 * Call gpt with prompt by id
 * @param dto
 * @param environment
 * @param version
 * @param options
 * @returns
 */
async function callPrompt(dto, environment, version, options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.PromptApi(account, log);
    const result = await api.callPrompt(dto, environment, version);
    return result;
}
//# sourceMappingURL=prompt.js.map