"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharedStateApi = exports.SharedStateApiFactory = exports.SharedStateApiFp = exports.SharedStateApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * SharedStateApi - axios parameter creator
 * @export
 */
const SharedStateApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShareStateIdGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiV1ShareStateIdGet', 'id', id);
            const localVarPath = `/api/v1/share/state/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SharedStateApiAxiosParamCreator = SharedStateApiAxiosParamCreator;
/**
 * SharedStateApi - functional programming interface
 * @export
 */
const SharedStateApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SharedStateApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShareStateIdGet(id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShareStateIdGet(id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SharedStateApi.apiV1ShareStateIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.SharedStateApiFp = SharedStateApiFp;
/**
 * SharedStateApi - factory interface
 * @export
 */
const SharedStateApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SharedStateApiFp)(configuration);
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShareStateIdGet(id, options) {
            return localVarFp.apiV1ShareStateIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SharedStateApiFactory = SharedStateApiFactory;
/**
 * SharedStateApi - object-oriented interface
 * @export
 * @class SharedStateApi
 * @extends {BaseAPI}
 */
class SharedStateApi extends base_1.BaseAPI {
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedStateApi
     */
    apiV1ShareStateIdGet(id, options) {
        return (0, exports.SharedStateApiFp)(this.configuration).apiV1ShareStateIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SharedStateApi = SharedStateApi;
//# sourceMappingURL=shared-state-api.js.map