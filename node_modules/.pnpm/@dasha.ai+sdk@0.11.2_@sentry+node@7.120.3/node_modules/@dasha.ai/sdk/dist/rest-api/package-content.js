"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageContentApi = void 0;
const base = __importStar(require("./base"));
const api = __importStar(require("./generated/core/api"));
class PackageContentApi extends base.Api {
    constructor(account, log) {
        super(api.PackageContentApi, account, log);
    }
    async getDescriptions(name, version, skip, take) {
        const response = await this.api.apiV1PackagesContentListGet(name, version, skip, take, {
            validateStatus: (status) => status < 400,
        });
        return response.data;
    }
    async getDescriptionsById(versionId, skip, take) {
        const response = await this.api.apiV1PackagesContentByVersionPackageVersionIdListGet(versionId, skip, take, {
            validateStatus: (status) => status < 400,
        });
        return response.data;
    }
    async getDescription(name, version) {
        const response = await this.api.apiV1PackagesContentGet(name, version, {
            validateStatus: (status) => status < 400
        });
        return response.data;
    }
    async getDescriptionByVersionId(versionId) {
        const response = await this.api.apiV1PackagesContentByVersionPackageVersionIdGet(versionId, {
            validateStatus: (status) => status < 400
        });
        return response.data;
    }
    async getDescriptionById(contentId) {
        const response = await this.api.apiV1PackagesContentPackageContentIdGet(contentId, {
            validateStatus: (status) => status < 400
        });
        return response.data;
    }
    async getContent(name, version) {
        const response = await this.api.apiV1PackagesContentContentGet(name, version, {
            validateStatus: (status) => status < 400,
            responseType: "arraybuffer",
        });
        return {
            content: Buffer.from(response.data, "binary"),
            contentType: response.headers["content-type"],
        };
    }
    async getContentById(contentId) {
        const response = await this.api.apiV1PackagesContentPackageContentIdContentGet(contentId, {
            validateStatus: (status) => status < 400,
            responseType: "arraybuffer",
        });
        return {
            content: Buffer.from(response.data, "binary"),
            contentType: response.headers["content-type"],
        };
    }
    async getContentByVersionId(versionId) {
        const response = await this.api.apiV1PackagesContentByVersionPackageVersionIdContentGet(versionId, {
            validateStatus: (status) => status < 400,
            responseType: "arraybuffer",
        });
        return {
            content: Buffer.from(response.data, "binary"),
            contentType: response.headers["content-type"],
        };
    }
    async uploadById(versionId, description, packageContent) {
        const response = await this.api.apiV1PackagesContentByVersionPackageVersionIdPost(versionId, description, packageContent, {
            validateStatus: (status) => status < 400,
        });
        return response.data;
    }
    async upload(name, version, description, packageContent) {
        const response = await this.api.apiV1PackagesContentPost(name, version, description, packageContent, {
            validateStatus: (status) => status < 400,
        });
        return response.data;
    }
}
exports.PackageContentApi = PackageContentApi;
//# sourceMappingURL=package-content.js.map