"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Dasha.AI Test System API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestCaseApi = exports.TestCaseApiFactory = exports.TestCaseApiFp = exports.TestCaseApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * TestCaseApi - axios parameter creator
 * @export
 */
const TestCaseApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {TestCaseCopyDTO} [testCaseCopyDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseCopyPost: async (testCaseCopyDTO, options = {}) => {
            const localVarPath = `/api/v1/testcase/copy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testCaseCopyDTO, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseIdDelete: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiV1TestcaseIdDelete', 'id', id);
            const localVarPath = `/api/v1/testcase/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseIdGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiV1TestcaseIdGet', 'id', id);
            const localVarPath = `/api/v1/testcase/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {TestCasePatchDTO} [testCasePatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseIdPatch: async (id, testCasePatchDTO, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiV1TestcaseIdPatch', 'id', id);
            const localVarPath = `/api/v1/testcase/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testCasePatchDTO, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseIdResultsGet: async (id, skip, take, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiV1TestcaseIdResultsGet', 'id', id);
            const localVarPath = `/api/v1/testcase/{id}/results`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} [skip]
         * @param {number} [take]
         * @param {string} [promptId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseListGet: async (skip, take, promptId, options = {}) => {
            const localVarPath = `/api/v1/testcase/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            if (promptId !== undefined) {
                localVarQueryParameter['promptId'] = promptId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {TestCaseCreateDTO} [testCaseCreateDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcasePost: async (testCaseCreateDTO, options = {}) => {
            const localVarPath = `/api/v1/testcase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testCaseCreateDTO, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseResultIdGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiV1TestcaseResultIdGet', 'id', id);
            const localVarPath = `/api/v1/testcase/result/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {TestCaseRunCreateDTO} [testCaseRunCreateDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseRunPost: async (testCaseRunCreateDTO, options = {}) => {
            const localVarPath = `/api/v1/testcase/run`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testCaseRunCreateDTO, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseRunsIdListGet: async (id, skip, take, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiV1TestcaseRunsIdListGet', 'id', id);
            const localVarPath = `/api/v1/testcase/runs/{id}/list`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseRunsIdStatusGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiV1TestcaseRunsIdStatusGet', 'id', id);
            const localVarPath = `/api/v1/testcase/runs/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.TestCaseApiAxiosParamCreator = TestCaseApiAxiosParamCreator;
/**
 * TestCaseApi - functional programming interface
 * @export
 */
const TestCaseApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TestCaseApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {TestCaseCopyDTO} [testCaseCopyDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestcaseCopyPost(testCaseCopyDTO, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TestcaseCopyPost(testCaseCopyDTO, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TestCaseApi.apiV1TestcaseCopyPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestcaseIdDelete(id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TestcaseIdDelete(id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TestCaseApi.apiV1TestcaseIdDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestcaseIdGet(id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TestcaseIdGet(id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TestCaseApi.apiV1TestcaseIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} id
         * @param {TestCasePatchDTO} [testCasePatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestcaseIdPatch(id, testCasePatchDTO, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TestcaseIdPatch(id, testCasePatchDTO, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TestCaseApi.apiV1TestcaseIdPatch']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} id
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestcaseIdResultsGet(id, skip, take, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TestcaseIdResultsGet(id, skip, take, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TestCaseApi.apiV1TestcaseIdResultsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} [skip]
         * @param {number} [take]
         * @param {string} [promptId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestcaseListGet(skip, take, promptId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TestcaseListGet(skip, take, promptId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TestCaseApi.apiV1TestcaseListGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {TestCaseCreateDTO} [testCaseCreateDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestcasePost(testCaseCreateDTO, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TestcasePost(testCaseCreateDTO, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TestCaseApi.apiV1TestcasePost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestcaseResultIdGet(id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TestcaseResultIdGet(id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TestCaseApi.apiV1TestcaseResultIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {TestCaseRunCreateDTO} [testCaseRunCreateDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestcaseRunPost(testCaseRunCreateDTO, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TestcaseRunPost(testCaseRunCreateDTO, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TestCaseApi.apiV1TestcaseRunPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} id
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestcaseRunsIdListGet(id, skip, take, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TestcaseRunsIdListGet(id, skip, take, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TestCaseApi.apiV1TestcaseRunsIdListGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestcaseRunsIdStatusGet(id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TestcaseRunsIdStatusGet(id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TestCaseApi.apiV1TestcaseRunsIdStatusGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.TestCaseApiFp = TestCaseApiFp;
/**
 * TestCaseApi - factory interface
 * @export
 */
const TestCaseApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TestCaseApiFp)(configuration);
    return {
        /**
         *
         * @param {TestCaseCopyDTO} [testCaseCopyDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseCopyPost(testCaseCopyDTO, options) {
            return localVarFp.apiV1TestcaseCopyPost(testCaseCopyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseIdDelete(id, options) {
            return localVarFp.apiV1TestcaseIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseIdGet(id, options) {
            return localVarFp.apiV1TestcaseIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {TestCasePatchDTO} [testCasePatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseIdPatch(id, testCasePatchDTO, options) {
            return localVarFp.apiV1TestcaseIdPatch(id, testCasePatchDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseIdResultsGet(id, skip, take, options) {
            return localVarFp.apiV1TestcaseIdResultsGet(id, skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [skip]
         * @param {number} [take]
         * @param {string} [promptId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseListGet(skip, take, promptId, options) {
            return localVarFp.apiV1TestcaseListGet(skip, take, promptId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {TestCaseCreateDTO} [testCaseCreateDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcasePost(testCaseCreateDTO, options) {
            return localVarFp.apiV1TestcasePost(testCaseCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseResultIdGet(id, options) {
            return localVarFp.apiV1TestcaseResultIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {TestCaseRunCreateDTO} [testCaseRunCreateDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseRunPost(testCaseRunCreateDTO, options) {
            return localVarFp.apiV1TestcaseRunPost(testCaseRunCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseRunsIdListGet(id, skip, take, options) {
            return localVarFp.apiV1TestcaseRunsIdListGet(id, skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestcaseRunsIdStatusGet(id, options) {
            return localVarFp.apiV1TestcaseRunsIdStatusGet(id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TestCaseApiFactory = TestCaseApiFactory;
/**
 * TestCaseApi - object-oriented interface
 * @export
 * @class TestCaseApi
 * @extends {BaseAPI}
 */
class TestCaseApi extends base_1.BaseAPI {
    /**
     *
     * @param {TestCaseCopyDTO} [testCaseCopyDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    apiV1TestcaseCopyPost(testCaseCopyDTO, options) {
        return (0, exports.TestCaseApiFp)(this.configuration).apiV1TestcaseCopyPost(testCaseCopyDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    apiV1TestcaseIdDelete(id, options) {
        return (0, exports.TestCaseApiFp)(this.configuration).apiV1TestcaseIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    apiV1TestcaseIdGet(id, options) {
        return (0, exports.TestCaseApiFp)(this.configuration).apiV1TestcaseIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {TestCasePatchDTO} [testCasePatchDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    apiV1TestcaseIdPatch(id, testCasePatchDTO, options) {
        return (0, exports.TestCaseApiFp)(this.configuration).apiV1TestcaseIdPatch(id, testCasePatchDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    apiV1TestcaseIdResultsGet(id, skip, take, options) {
        return (0, exports.TestCaseApiFp)(this.configuration).apiV1TestcaseIdResultsGet(id, skip, take, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [skip]
     * @param {number} [take]
     * @param {string} [promptId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    apiV1TestcaseListGet(skip, take, promptId, options) {
        return (0, exports.TestCaseApiFp)(this.configuration).apiV1TestcaseListGet(skip, take, promptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {TestCaseCreateDTO} [testCaseCreateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    apiV1TestcasePost(testCaseCreateDTO, options) {
        return (0, exports.TestCaseApiFp)(this.configuration).apiV1TestcasePost(testCaseCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    apiV1TestcaseResultIdGet(id, options) {
        return (0, exports.TestCaseApiFp)(this.configuration).apiV1TestcaseResultIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {TestCaseRunCreateDTO} [testCaseRunCreateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    apiV1TestcaseRunPost(testCaseRunCreateDTO, options) {
        return (0, exports.TestCaseApiFp)(this.configuration).apiV1TestcaseRunPost(testCaseRunCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    apiV1TestcaseRunsIdListGet(id, skip, take, options) {
        return (0, exports.TestCaseApiFp)(this.configuration).apiV1TestcaseRunsIdListGet(id, skip, take, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    apiV1TestcaseRunsIdStatusGet(id, options) {
        return (0, exports.TestCaseApiFp)(this.configuration).apiV1TestcaseRunsIdStatusGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TestCaseApi = TestCaseApi;
//# sourceMappingURL=test-case-api.js.map