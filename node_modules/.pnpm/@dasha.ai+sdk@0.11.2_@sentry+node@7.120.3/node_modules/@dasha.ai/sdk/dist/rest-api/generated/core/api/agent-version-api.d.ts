/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { AgentVersionResponseDTO } from '../models';
import type { AgentVersionUpdateDTO } from '../models';
import type { HiddenStateEnum } from '../models';
/**
 * AgentVersionApi - axios parameter creator
 * @export
 */
export declare const AgentVersionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} [agentId]
     * @param {HiddenStateEnum} [hiddenState]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AgentsVersionsGet: (agentId?: string, hiddenState?: HiddenStateEnum, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AgentsVersionsIdBinaryGet: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AgentsVersionsIdGet: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {AgentVersionUpdateDTO} [agentVersionUpdateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AgentsVersionsIdPatch: (id: string, agentVersionUpdateDTO?: AgentVersionUpdateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} agentId
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AgentsVersionsPost: (agentId: string, body: File, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AgentVersionApi - functional programming interface
 * @export
 */
export declare const AgentVersionApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} [agentId]
     * @param {HiddenStateEnum} [hiddenState]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AgentsVersionsGet(agentId?: string, hiddenState?: HiddenStateEnum, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AgentVersionResponseDTO>>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AgentsVersionsIdBinaryGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AgentsVersionsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentVersionResponseDTO>>;
    /**
     *
     * @param {string} id
     * @param {AgentVersionUpdateDTO} [agentVersionUpdateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AgentsVersionsIdPatch(id: string, agentVersionUpdateDTO?: AgentVersionUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentVersionResponseDTO>>;
    /**
     *
     * @param {string} agentId
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AgentsVersionsPost(agentId: string, body: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentVersionResponseDTO>>;
};
/**
 * AgentVersionApi - factory interface
 * @export
 */
export declare const AgentVersionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} [agentId]
     * @param {HiddenStateEnum} [hiddenState]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AgentsVersionsGet(agentId?: string, hiddenState?: HiddenStateEnum, skip?: number, take?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<AgentVersionResponseDTO>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AgentsVersionsIdBinaryGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AgentsVersionsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AgentVersionResponseDTO>;
    /**
     *
     * @param {string} id
     * @param {AgentVersionUpdateDTO} [agentVersionUpdateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AgentsVersionsIdPatch(id: string, agentVersionUpdateDTO?: AgentVersionUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<AgentVersionResponseDTO>;
    /**
     *
     * @param {string} agentId
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AgentsVersionsPost(agentId: string, body: File, options?: RawAxiosRequestConfig): AxiosPromise<AgentVersionResponseDTO>;
};
/**
 * AgentVersionApi - object-oriented interface
 * @export
 * @class AgentVersionApi
 * @extends {BaseAPI}
 */
export declare class AgentVersionApi extends BaseAPI {
    /**
     *
     * @param {string} [agentId]
     * @param {HiddenStateEnum} [hiddenState]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentVersionApi
     */
    apiV1AgentsVersionsGet(agentId?: string, hiddenState?: HiddenStateEnum, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AgentVersionResponseDTO[], any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentVersionApi
     */
    apiV1AgentsVersionsIdBinaryGet(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentVersionApi
     */
    apiV1AgentsVersionsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AgentVersionResponseDTO, any>>;
    /**
     *
     * @param {string} id
     * @param {AgentVersionUpdateDTO} [agentVersionUpdateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentVersionApi
     */
    apiV1AgentsVersionsIdPatch(id: string, agentVersionUpdateDTO?: AgentVersionUpdateDTO, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AgentVersionResponseDTO, any>>;
    /**
     *
     * @param {string} agentId
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentVersionApi
     */
    apiV1AgentsVersionsPost(agentId: string, body: File, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AgentVersionResponseDTO, any>>;
}
