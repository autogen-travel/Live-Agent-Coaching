"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TtsApi = void 0;
const __1 = require("..");
const log_1 = require("../log");
const base = __importStar(require("./base"));
const api = __importStar(require("./generated/core/api"));
class TtsApi extends base.Api {
    constructor(account, log) {
        super(api.TtsApi, account, log);
    }
    async synthesize(request) {
        const response = await this.api.apiV1TtsSynthesisPost(request, {
            validateStatus: (status) => status < 400 || status === 404,
            responseType: "arraybuffer",
        });
        if (response.status === 404) {
            (0, log_1.logAndThrow)(this.log, new __1.errors.TtsNotFoundError(request.configName));
        }
        // TODO: how to tell the schema/code generators to return a proper type?
        return new Uint8Array(response.data);
    }
    async cloneAsync(request, audios) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const response = await this.api.apiV1TtsClonePost(request.name, request.description, request.language, request.provider, (_b = (_a = request.providerSpecific) === null || _a === void 0 ? void 0 : _a.elevenLabs) === null || _b === void 0 ? void 0 : _b.removeBackgroundNoise, (_d = (_c = request.providerSpecific) === null || _c === void 0 ? void 0 : _c.cartesia) === null || _d === void 0 ? void 0 : _d.mode, (_f = (_e = request.providerSpecific) === null || _e === void 0 ? void 0 : _e.cartesia) === null || _f === void 0 ? void 0 : _f.enhance, (_h = (_g = request.providerSpecific) === null || _g === void 0 ? void 0 : _g.cartesia) === null || _h === void 0 ? void 0 : _h.transcript, audios, {
            validateStatus: (status) => status < 400,
        });
        const voice = response.data;
        const patched = await this.api.apiV1TtsCloneIdPatch(voice.id, {
            labels: request.labels,
        }, {
            validateStatus: (status) => status < 400,
        });
        return patched.data;
    }
    async updateCloneAsync(id, dto) {
        const response = await this.api.apiV1TtsCloneIdPatch(id, dto, {
            validateStatus: (status) => status < 400,
        });
        return response.data;
    }
    async deleteCloneAsync(id) {
        await this.api.apiV1TtsCloneIdDelete(id);
    }
    async listVoicesAsync(filter) {
        const response = await this.api.apiV1TtsVoicesGet(filter);
        return response.data;
    }
}
exports.TtsApi = TtsApi;
//# sourceMappingURL=tts.js.map