"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestSystemApi = void 0;
const base = __importStar(require("./base"));
const api = __importStar(require("./generated/testsystem/api"));
class TestSystemApi extends base.Api {
    constructor(account, log) {
        super(api.TestCaseApi, account, log);
    }
    async createTestCase(request) {
        const response = await this.api.apiV1TestcasePost(request, {
            validateStatus: (status) => status < 400,
        });
        return response.data;
    }
    async deleteTestCase(id) {
        const response = await this.api.apiV1TestcaseIdDelete(id, {
            validateStatus: (status) => status < 400,
        });
        return response.data;
    }
    async updateTestCase(id, request) {
        const response = await this.api.apiV1TestcaseIdPatch(id, request, {
            validateStatus: (status) => status < 400,
        });
        return response.data;
    }
    async listTestCases(promptId, skip, take) {
        const response = await this.api.apiV1TestcaseListGet(skip, take, promptId, {
            validateStatus: (status) => status < 400,
        });
        return response.data;
    }
    async runTestCases(dto) {
        const response = await this.api.apiV1TestcaseRunPost(dto, {
            validateStatus: (status) => status < 400,
        });
        return response.data;
    }
    async getRunResults(runId) {
        const response = await this.api.apiV1TestcaseRunsIdListGet(runId, undefined, undefined, {
            validateStatus: (status) => status < 400,
        });
        return response.data;
    }
    async copyTestCases(dto) {
        const response = await this.api.apiV1TestcaseCopyPost(dto, {
            validateStatus: (status) => status < 400,
        });
        return response.data;
    }
}
exports.TestSystemApi = TestSystemApi;
//# sourceMappingURL=testsystem.js.map