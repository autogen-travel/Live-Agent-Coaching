/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { PackageVersionCreateOrUpdateDTO } from '../models';
import type { PackageVersionDescriptionDTO } from '../models';
import type { PackageVersionPublishDTO } from '../models';
/**
 * PackageVersionApi - axios parameter creator
 * @export
 */
export declare const PackageVersionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} packageDescriptionId
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionByNamePackageDescriptionIdListGet: (packageDescriptionId: string, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionGet: (packageName: string, packageVersion: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} packageName
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionListGet: (packageName: string, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} packageVersionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionPackageVersionIdGet: (packageVersionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {PackageVersionCreateOrUpdateDTO} packageVersionCreateOrUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionPost: (packageVersionCreateOrUpdateDTO: PackageVersionCreateOrUpdateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {PackageVersionPublishDTO} packageVersionPublishDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionPublishPost: (packageVersionPublishDTO: PackageVersionPublishDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PackageVersionApi - functional programming interface
 * @export
 */
export declare const PackageVersionApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} packageDescriptionId
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionByNamePackageDescriptionIdListGet(packageDescriptionId: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PackageVersionDescriptionDTO>>>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionGet(packageName: string, packageVersion: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackageVersionDescriptionDTO>>;
    /**
     *
     * @param {string} packageName
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionListGet(packageName: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PackageVersionDescriptionDTO>>>;
    /**
     *
     * @param {string} packageVersionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionPackageVersionIdGet(packageVersionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackageVersionDescriptionDTO>>;
    /**
     *
     * @param {PackageVersionCreateOrUpdateDTO} packageVersionCreateOrUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionPost(packageVersionCreateOrUpdateDTO: PackageVersionCreateOrUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackageVersionDescriptionDTO>>;
    /**
     *
     * @param {PackageVersionPublishDTO} packageVersionPublishDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionPublishPost(packageVersionPublishDTO: PackageVersionPublishDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackageVersionDescriptionDTO>>;
};
/**
 * PackageVersionApi - factory interface
 * @export
 */
export declare const PackageVersionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} packageDescriptionId
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionByNamePackageDescriptionIdListGet(packageDescriptionId: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PackageVersionDescriptionDTO>>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionGet(packageName: string, packageVersion: string, options?: RawAxiosRequestConfig): AxiosPromise<PackageVersionDescriptionDTO>;
    /**
     *
     * @param {string} packageName
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionListGet(packageName: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PackageVersionDescriptionDTO>>;
    /**
     *
     * @param {string} packageVersionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionPackageVersionIdGet(packageVersionId: string, options?: RawAxiosRequestConfig): AxiosPromise<PackageVersionDescriptionDTO>;
    /**
     *
     * @param {PackageVersionCreateOrUpdateDTO} packageVersionCreateOrUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionPost(packageVersionCreateOrUpdateDTO: PackageVersionCreateOrUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<PackageVersionDescriptionDTO>;
    /**
     *
     * @param {PackageVersionPublishDTO} packageVersionPublishDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesVersionPublishPost(packageVersionPublishDTO: PackageVersionPublishDTO, options?: RawAxiosRequestConfig): AxiosPromise<PackageVersionDescriptionDTO>;
};
/**
 * PackageVersionApi - object-oriented interface
 * @export
 * @class PackageVersionApi
 * @extends {BaseAPI}
 */
export declare class PackageVersionApi extends BaseAPI {
    /**
     *
     * @param {string} packageDescriptionId
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageVersionApi
     */
    apiV1PackagesVersionByNamePackageDescriptionIdListGet(packageDescriptionId: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackageVersionDescriptionDTO[], any>>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageVersionApi
     */
    apiV1PackagesVersionGet(packageName: string, packageVersion: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackageVersionDescriptionDTO, any>>;
    /**
     *
     * @param {string} packageName
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageVersionApi
     */
    apiV1PackagesVersionListGet(packageName: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackageVersionDescriptionDTO[], any>>;
    /**
     *
     * @param {string} packageVersionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageVersionApi
     */
    apiV1PackagesVersionPackageVersionIdGet(packageVersionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackageVersionDescriptionDTO, any>>;
    /**
     *
     * @param {PackageVersionCreateOrUpdateDTO} packageVersionCreateOrUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageVersionApi
     */
    apiV1PackagesVersionPost(packageVersionCreateOrUpdateDTO: PackageVersionCreateOrUpdateDTO, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackageVersionDescriptionDTO, any>>;
    /**
     *
     * @param {PackageVersionPublishDTO} packageVersionPublishDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageVersionApi
     */
    apiV1PackagesVersionPublishPost(packageVersionPublishDTO: PackageVersionPublishDTO, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackageVersionDescriptionDTO, any>>;
}
