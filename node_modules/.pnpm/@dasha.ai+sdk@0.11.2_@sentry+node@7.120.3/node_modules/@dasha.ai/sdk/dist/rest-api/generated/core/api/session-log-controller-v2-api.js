"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionLogControllerV2Api = exports.SessionLogControllerV2ApiFactory = exports.SessionLogControllerV2ApiFp = exports.SessionLogControllerV2ApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * SessionLogControllerV2Api - axios parameter creator
 * @export
 */
const SessionLogControllerV2ApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} jobId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2LogsEntityJobIdGet: async (jobId, options = {}) => {
            // verify required parameter 'jobId' is not null or undefined
            (0, common_1.assertParamExists)('apiV2LogsEntityJobIdGet', 'jobId', jobId);
            const localVarPath = `/api/v2/logs/entity/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SessionLogControllerV2ApiAxiosParamCreator = SessionLogControllerV2ApiAxiosParamCreator;
/**
 * SessionLogControllerV2Api - functional programming interface
 * @export
 */
const SessionLogControllerV2ApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SessionLogControllerV2ApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} jobId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2LogsEntityJobIdGet(jobId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2LogsEntityJobIdGet(jobId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SessionLogControllerV2Api.apiV2LogsEntityJobIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.SessionLogControllerV2ApiFp = SessionLogControllerV2ApiFp;
/**
 * SessionLogControllerV2Api - factory interface
 * @export
 */
const SessionLogControllerV2ApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SessionLogControllerV2ApiFp)(configuration);
    return {
        /**
         *
         * @param {string} jobId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2LogsEntityJobIdGet(jobId, options) {
            return localVarFp.apiV2LogsEntityJobIdGet(jobId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SessionLogControllerV2ApiFactory = SessionLogControllerV2ApiFactory;
/**
 * SessionLogControllerV2Api - object-oriented interface
 * @export
 * @class SessionLogControllerV2Api
 * @extends {BaseAPI}
 */
class SessionLogControllerV2Api extends base_1.BaseAPI {
    /**
     *
     * @param {string} jobId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionLogControllerV2Api
     */
    apiV2LogsEntityJobIdGet(jobId, options) {
        return (0, exports.SessionLogControllerV2ApiFp)(this.configuration).apiV2LogsEntityJobIdGet(jobId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SessionLogControllerV2Api = SessionLogControllerV2Api;
//# sourceMappingURL=session-log-controller-v2-api.js.map