"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupApi = exports.GroupApiFactory = exports.GroupApiFp = exports.GroupApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * GroupApi - axios parameter creator
 * @export
 */
const GroupApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupByNameGet: async (name, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('apiV1GroupByNameGet', 'name', name);
            const localVarPath = `/api/v1/group/by-name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupDefaultGet: async (options = {}) => {
            const localVarPath = `/api/v1/group/default`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} [skip]
         * @param {number} [take]
         * @param {boolean} [includeTemporary]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupGet: async (skip, take, includeTemporary, options = {}) => {
            const localVarPath = `/api/v1/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            if (includeTemporary !== undefined) {
                localVarQueryParameter['includeTemporary'] = includeTemporary;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupIdDelete: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiV1GroupIdDelete', 'id', id);
            const localVarPath = `/api/v1/group/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupIdGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiV1GroupIdGet', 'id', id);
            const localVarPath = `/api/v1/group/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {GroupPatchDTO} [groupPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupIdPatch: async (id, groupPatchDTO, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiV1GroupIdPatch', 'id', id);
            const localVarPath = `/api/v1/group/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(groupPatchDTO, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {GroupRequestDTO} [groupRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupPost: async (groupRequestDTO, options = {}) => {
            const localVarPath = `/api/v1/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(groupRequestDTO, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {GroupTemporaryCreateRequestDTO} [groupTemporaryCreateRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupTemporaryPost: async (groupTemporaryCreateRequestDTO, options = {}) => {
            const localVarPath = `/api/v1/group/temporary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(groupTemporaryCreateRequestDTO, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.GroupApiAxiosParamCreator = GroupApiAxiosParamCreator;
/**
 * GroupApi - functional programming interface
 * @export
 */
const GroupApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.GroupApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GroupByNameGet(name, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GroupByNameGet(name, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupApi.apiV1GroupByNameGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GroupDefaultGet(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GroupDefaultGet(options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupApi.apiV1GroupDefaultGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} [skip]
         * @param {number} [take]
         * @param {boolean} [includeTemporary]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GroupGet(skip, take, includeTemporary, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GroupGet(skip, take, includeTemporary, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupApi.apiV1GroupGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GroupIdDelete(id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GroupIdDelete(id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupApi.apiV1GroupIdDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GroupIdGet(id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GroupIdGet(id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupApi.apiV1GroupIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} id
         * @param {GroupPatchDTO} [groupPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GroupIdPatch(id, groupPatchDTO, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GroupIdPatch(id, groupPatchDTO, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupApi.apiV1GroupIdPatch']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {GroupRequestDTO} [groupRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GroupPost(groupRequestDTO, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GroupPost(groupRequestDTO, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupApi.apiV1GroupPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {GroupTemporaryCreateRequestDTO} [groupTemporaryCreateRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GroupTemporaryPost(groupTemporaryCreateRequestDTO, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GroupTemporaryPost(groupTemporaryCreateRequestDTO, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupApi.apiV1GroupTemporaryPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.GroupApiFp = GroupApiFp;
/**
 * GroupApi - factory interface
 * @export
 */
const GroupApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.GroupApiFp)(configuration);
    return {
        /**
         *
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupByNameGet(name, options) {
            return localVarFp.apiV1GroupByNameGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupDefaultGet(options) {
            return localVarFp.apiV1GroupDefaultGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [skip]
         * @param {number} [take]
         * @param {boolean} [includeTemporary]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupGet(skip, take, includeTemporary, options) {
            return localVarFp.apiV1GroupGet(skip, take, includeTemporary, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupIdDelete(id, options) {
            return localVarFp.apiV1GroupIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupIdGet(id, options) {
            return localVarFp.apiV1GroupIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {GroupPatchDTO} [groupPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupIdPatch(id, groupPatchDTO, options) {
            return localVarFp.apiV1GroupIdPatch(id, groupPatchDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {GroupRequestDTO} [groupRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupPost(groupRequestDTO, options) {
            return localVarFp.apiV1GroupPost(groupRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {GroupTemporaryCreateRequestDTO} [groupTemporaryCreateRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupTemporaryPost(groupTemporaryCreateRequestDTO, options) {
            return localVarFp.apiV1GroupTemporaryPost(groupTemporaryCreateRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};
exports.GroupApiFactory = GroupApiFactory;
/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
class GroupApi extends base_1.BaseAPI {
    /**
     *
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    apiV1GroupByNameGet(name, options) {
        return (0, exports.GroupApiFp)(this.configuration).apiV1GroupByNameGet(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    apiV1GroupDefaultGet(options) {
        return (0, exports.GroupApiFp)(this.configuration).apiV1GroupDefaultGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [skip]
     * @param {number} [take]
     * @param {boolean} [includeTemporary]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    apiV1GroupGet(skip, take, includeTemporary, options) {
        return (0, exports.GroupApiFp)(this.configuration).apiV1GroupGet(skip, take, includeTemporary, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    apiV1GroupIdDelete(id, options) {
        return (0, exports.GroupApiFp)(this.configuration).apiV1GroupIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    apiV1GroupIdGet(id, options) {
        return (0, exports.GroupApiFp)(this.configuration).apiV1GroupIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {GroupPatchDTO} [groupPatchDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    apiV1GroupIdPatch(id, groupPatchDTO, options) {
        return (0, exports.GroupApiFp)(this.configuration).apiV1GroupIdPatch(id, groupPatchDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {GroupRequestDTO} [groupRequestDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    apiV1GroupPost(groupRequestDTO, options) {
        return (0, exports.GroupApiFp)(this.configuration).apiV1GroupPost(groupRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {GroupTemporaryCreateRequestDTO} [groupTemporaryCreateRequestDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    apiV1GroupTemporaryPost(groupTemporaryCreateRequestDTO, options) {
        return (0, exports.GroupApiFp)(this.configuration).apiV1GroupTemporaryPost(groupTemporaryCreateRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.GroupApi = GroupApi;
//# sourceMappingURL=group-api.js.map