/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { PackagePermissionDescriptionDTO } from '../models';
import type { PackagePermissionsCreateOrUpdateDTO } from '../models';
import type { PackagePermissionsDeleteDTO } from '../models';
/**
 * PackagePermissionApi - axios parameter creator
 * @export
 */
export declare const PackagePermissionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} packageDescriptionId
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionByNamePackageDescriptionIdListGet: (packageDescriptionId: string, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {PackagePermissionsDeleteDTO} packagePermissionsDeleteDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionDelete: (packagePermissionsDeleteDTO: PackagePermissionsDeleteDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} packageName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionGet: (packageName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} packageName
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionListGet: (packageName: string, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionOwnListGet: (skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} packageDescriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionPackageDescriptionIdGet: (packageDescriptionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {PackagePermissionsCreateOrUpdateDTO} packagePermissionsCreateOrUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionPost: (packagePermissionsCreateOrUpdateDTO: PackagePermissionsCreateOrUpdateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PackagePermissionApi - functional programming interface
 * @export
 */
export declare const PackagePermissionApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} packageDescriptionId
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionByNamePackageDescriptionIdListGet(packageDescriptionId: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PackagePermissionDescriptionDTO>>>;
    /**
     *
     * @param {PackagePermissionsDeleteDTO} packagePermissionsDeleteDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionDelete(packagePermissionsDeleteDTO: PackagePermissionsDeleteDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackagePermissionDescriptionDTO>>;
    /**
     *
     * @param {string} packageName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionGet(packageName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackagePermissionDescriptionDTO>>;
    /**
     *
     * @param {string} packageName
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionListGet(packageName: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PackagePermissionDescriptionDTO>>>;
    /**
     *
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionOwnListGet(skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PackagePermissionDescriptionDTO>>>;
    /**
     *
     * @param {string} packageDescriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionPackageDescriptionIdGet(packageDescriptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackagePermissionDescriptionDTO>>;
    /**
     *
     * @param {PackagePermissionsCreateOrUpdateDTO} packagePermissionsCreateOrUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionPost(packagePermissionsCreateOrUpdateDTO: PackagePermissionsCreateOrUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackagePermissionDescriptionDTO>>;
};
/**
 * PackagePermissionApi - factory interface
 * @export
 */
export declare const PackagePermissionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} packageDescriptionId
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionByNamePackageDescriptionIdListGet(packageDescriptionId: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PackagePermissionDescriptionDTO>>;
    /**
     *
     * @param {PackagePermissionsDeleteDTO} packagePermissionsDeleteDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionDelete(packagePermissionsDeleteDTO: PackagePermissionsDeleteDTO, options?: RawAxiosRequestConfig): AxiosPromise<PackagePermissionDescriptionDTO>;
    /**
     *
     * @param {string} packageName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionGet(packageName: string, options?: RawAxiosRequestConfig): AxiosPromise<PackagePermissionDescriptionDTO>;
    /**
     *
     * @param {string} packageName
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionListGet(packageName: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PackagePermissionDescriptionDTO>>;
    /**
     *
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionOwnListGet(skip?: number, take?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PackagePermissionDescriptionDTO>>;
    /**
     *
     * @param {string} packageDescriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionPackageDescriptionIdGet(packageDescriptionId: string, options?: RawAxiosRequestConfig): AxiosPromise<PackagePermissionDescriptionDTO>;
    /**
     *
     * @param {PackagePermissionsCreateOrUpdateDTO} packagePermissionsCreateOrUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesPermissionPost(packagePermissionsCreateOrUpdateDTO: PackagePermissionsCreateOrUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<PackagePermissionDescriptionDTO>;
};
/**
 * PackagePermissionApi - object-oriented interface
 * @export
 * @class PackagePermissionApi
 * @extends {BaseAPI}
 */
export declare class PackagePermissionApi extends BaseAPI {
    /**
     *
     * @param {string} packageDescriptionId
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagePermissionApi
     */
    apiV1PackagesPermissionByNamePackageDescriptionIdListGet(packageDescriptionId: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackagePermissionDescriptionDTO[], any>>;
    /**
     *
     * @param {PackagePermissionsDeleteDTO} packagePermissionsDeleteDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagePermissionApi
     */
    apiV1PackagesPermissionDelete(packagePermissionsDeleteDTO: PackagePermissionsDeleteDTO, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackagePermissionDescriptionDTO, any>>;
    /**
     *
     * @param {string} packageName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagePermissionApi
     */
    apiV1PackagesPermissionGet(packageName: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackagePermissionDescriptionDTO, any>>;
    /**
     *
     * @param {string} packageName
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagePermissionApi
     */
    apiV1PackagesPermissionListGet(packageName: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackagePermissionDescriptionDTO[], any>>;
    /**
     *
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagePermissionApi
     */
    apiV1PackagesPermissionOwnListGet(skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackagePermissionDescriptionDTO[], any>>;
    /**
     *
     * @param {string} packageDescriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagePermissionApi
     */
    apiV1PackagesPermissionPackageDescriptionIdGet(packageDescriptionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackagePermissionDescriptionDTO, any>>;
    /**
     *
     * @param {PackagePermissionsCreateOrUpdateDTO} packagePermissionsCreateOrUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagePermissionApi
     */
    apiV1PackagesPermissionPost(packagePermissionsCreateOrUpdateDTO: PackagePermissionsCreateOrUpdateDTO, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackagePermissionDescriptionDTO, any>>;
}
