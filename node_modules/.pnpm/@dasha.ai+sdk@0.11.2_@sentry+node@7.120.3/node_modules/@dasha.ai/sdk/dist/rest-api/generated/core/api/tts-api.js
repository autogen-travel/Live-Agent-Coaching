"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TtsApi = exports.TtsApiFactory = exports.TtsApiFp = exports.TtsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * TtsApi - axios parameter creator
 * @export
 */
const TtsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsCloneIdDelete: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiV1TtsCloneIdDelete', 'id', id);
            const localVarPath = `/api/v1/tts/clone/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsCloneIdGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiV1TtsCloneIdGet', 'id', id);
            const localVarPath = `/api/v1/tts/clone/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {TtsClonePatchDto} [ttsClonePatchDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsCloneIdPatch: async (id, ttsClonePatchDto, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiV1TtsCloneIdPatch', 'id', id);
            const localVarPath = `/api/v1/tts/clone/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(ttsClonePatchDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} name
         * @param {string} description
         * @param {string} language
         * @param {TtsProvider} provider
         * @param {boolean} [providerSpecificElevenLabsRemoveBackgroundNoise]
         * @param {CartesiaMode} [providerSpecificCartesiaMode]
         * @param {boolean} [providerSpecificCartesiaEnhance]
         * @param {string} [providerSpecificCartesiaTranscript]
         * @param {Array<File>} [audios]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsClonePost: async (name, description, language, provider, providerSpecificElevenLabsRemoveBackgroundNoise, providerSpecificCartesiaMode, providerSpecificCartesiaEnhance, providerSpecificCartesiaTranscript, audios, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('apiV1TtsClonePost', 'name', name);
            // verify required parameter 'description' is not null or undefined
            (0, common_1.assertParamExists)('apiV1TtsClonePost', 'description', description);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('apiV1TtsClonePost', 'language', language);
            // verify required parameter 'provider' is not null or undefined
            (0, common_1.assertParamExists)('apiV1TtsClonePost', 'provider', provider);
            const localVarPath = `/api/v1/tts/clone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (name !== undefined) {
                localVarFormParams.append('Name', name);
            }
            if (description !== undefined) {
                localVarFormParams.append('Description', description);
            }
            if (language !== undefined) {
                localVarFormParams.append('Language', language);
            }
            if (provider !== undefined) {
                localVarFormParams.append('Provider', provider);
            }
            if (providerSpecificElevenLabsRemoveBackgroundNoise !== undefined) {
                localVarFormParams.append('ProviderSpecific.ElevenLabs.RemoveBackgroundNoise', String(providerSpecificElevenLabsRemoveBackgroundNoise));
            }
            if (providerSpecificCartesiaMode !== undefined) {
                localVarFormParams.append('ProviderSpecific.Cartesia.Mode', providerSpecificCartesiaMode);
            }
            if (providerSpecificCartesiaEnhance !== undefined) {
                localVarFormParams.append('ProviderSpecific.Cartesia.Enhance', String(providerSpecificCartesiaEnhance));
            }
            if (providerSpecificCartesiaTranscript !== undefined) {
                localVarFormParams.append('ProviderSpecific.Cartesia.Transcript', providerSpecificCartesiaTranscript);
            }
            if (audios) {
                audios.forEach((element) => {
                    localVarFormParams.append('audios', element);
                });
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsGroupsGet: async (names, skip, take, options = {}) => {
            const localVarPath = `/api/v1/tts/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (names) {
                localVarQueryParameter['names'] = names;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsGroupsIdGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiV1TtsGroupsIdGet', 'id', id);
            const localVarPath = `/api/v1/tts/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {TtsSynthesisRequestDTO} [ttsSynthesisRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsSynthesisPost: async (ttsSynthesisRequestDTO, options = {}) => {
            const localVarPath = `/api/v1/tts/synthesis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(ttsSynthesisRequestDTO, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ListOptions} [showOptions]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsVoicesGet: async (showOptions, options = {}) => {
            const localVarPath = `/api/v1/tts/voices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (showOptions !== undefined) {
                localVarQueryParameter['showOptions'] = showOptions;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.TtsApiAxiosParamCreator = TtsApiAxiosParamCreator;
/**
 * TtsApi - functional programming interface
 * @export
 */
const TtsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TtsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TtsCloneIdDelete(id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TtsCloneIdDelete(id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TtsApi.apiV1TtsCloneIdDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TtsCloneIdGet(id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TtsCloneIdGet(id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TtsApi.apiV1TtsCloneIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} id
         * @param {TtsClonePatchDto} [ttsClonePatchDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TtsCloneIdPatch(id, ttsClonePatchDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TtsCloneIdPatch(id, ttsClonePatchDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TtsApi.apiV1TtsCloneIdPatch']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} name
         * @param {string} description
         * @param {string} language
         * @param {TtsProvider} provider
         * @param {boolean} [providerSpecificElevenLabsRemoveBackgroundNoise]
         * @param {CartesiaMode} [providerSpecificCartesiaMode]
         * @param {boolean} [providerSpecificCartesiaEnhance]
         * @param {string} [providerSpecificCartesiaTranscript]
         * @param {Array<File>} [audios]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TtsClonePost(name, description, language, provider, providerSpecificElevenLabsRemoveBackgroundNoise, providerSpecificCartesiaMode, providerSpecificCartesiaEnhance, providerSpecificCartesiaTranscript, audios, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TtsClonePost(name, description, language, provider, providerSpecificElevenLabsRemoveBackgroundNoise, providerSpecificCartesiaMode, providerSpecificCartesiaEnhance, providerSpecificCartesiaTranscript, audios, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TtsApi.apiV1TtsClonePost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TtsGroupsGet(names, skip, take, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TtsGroupsGet(names, skip, take, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TtsApi.apiV1TtsGroupsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TtsGroupsIdGet(id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TtsGroupsIdGet(id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TtsApi.apiV1TtsGroupsIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {TtsSynthesisRequestDTO} [ttsSynthesisRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TtsApi.apiV1TtsSynthesisPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {ListOptions} [showOptions]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TtsVoicesGet(showOptions, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TtsVoicesGet(showOptions, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TtsApi.apiV1TtsVoicesGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.TtsApiFp = TtsApiFp;
/**
 * TtsApi - factory interface
 * @export
 */
const TtsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TtsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsCloneIdDelete(id, options) {
            return localVarFp.apiV1TtsCloneIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsCloneIdGet(id, options) {
            return localVarFp.apiV1TtsCloneIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {TtsClonePatchDto} [ttsClonePatchDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsCloneIdPatch(id, ttsClonePatchDto, options) {
            return localVarFp.apiV1TtsCloneIdPatch(id, ttsClonePatchDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} name
         * @param {string} description
         * @param {string} language
         * @param {TtsProvider} provider
         * @param {boolean} [providerSpecificElevenLabsRemoveBackgroundNoise]
         * @param {CartesiaMode} [providerSpecificCartesiaMode]
         * @param {boolean} [providerSpecificCartesiaEnhance]
         * @param {string} [providerSpecificCartesiaTranscript]
         * @param {Array<File>} [audios]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsClonePost(name, description, language, provider, providerSpecificElevenLabsRemoveBackgroundNoise, providerSpecificCartesiaMode, providerSpecificCartesiaEnhance, providerSpecificCartesiaTranscript, audios, options) {
            return localVarFp.apiV1TtsClonePost(name, description, language, provider, providerSpecificElevenLabsRemoveBackgroundNoise, providerSpecificCartesiaMode, providerSpecificCartesiaEnhance, providerSpecificCartesiaTranscript, audios, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsGroupsGet(names, skip, take, options) {
            return localVarFp.apiV1TtsGroupsGet(names, skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsGroupsIdGet(id, options) {
            return localVarFp.apiV1TtsGroupsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {TtsSynthesisRequestDTO} [ttsSynthesisRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options) {
            return localVarFp.apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ListOptions} [showOptions]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsVoicesGet(showOptions, options) {
            return localVarFp.apiV1TtsVoicesGet(showOptions, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TtsApiFactory = TtsApiFactory;
/**
 * TtsApi - object-oriented interface
 * @export
 * @class TtsApi
 * @extends {BaseAPI}
 */
class TtsApi extends base_1.BaseAPI {
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsCloneIdDelete(id, options) {
        return (0, exports.TtsApiFp)(this.configuration).apiV1TtsCloneIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsCloneIdGet(id, options) {
        return (0, exports.TtsApiFp)(this.configuration).apiV1TtsCloneIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {TtsClonePatchDto} [ttsClonePatchDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsCloneIdPatch(id, ttsClonePatchDto, options) {
        return (0, exports.TtsApiFp)(this.configuration).apiV1TtsCloneIdPatch(id, ttsClonePatchDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} name
     * @param {string} description
     * @param {string} language
     * @param {TtsProvider} provider
     * @param {boolean} [providerSpecificElevenLabsRemoveBackgroundNoise]
     * @param {CartesiaMode} [providerSpecificCartesiaMode]
     * @param {boolean} [providerSpecificCartesiaEnhance]
     * @param {string} [providerSpecificCartesiaTranscript]
     * @param {Array<File>} [audios]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsClonePost(name, description, language, provider, providerSpecificElevenLabsRemoveBackgroundNoise, providerSpecificCartesiaMode, providerSpecificCartesiaEnhance, providerSpecificCartesiaTranscript, audios, options) {
        return (0, exports.TtsApiFp)(this.configuration).apiV1TtsClonePost(name, description, language, provider, providerSpecificElevenLabsRemoveBackgroundNoise, providerSpecificCartesiaMode, providerSpecificCartesiaEnhance, providerSpecificCartesiaTranscript, audios, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {Array<string>} [names]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsGroupsGet(names, skip, take, options) {
        return (0, exports.TtsApiFp)(this.configuration).apiV1TtsGroupsGet(names, skip, take, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsGroupsIdGet(id, options) {
        return (0, exports.TtsApiFp)(this.configuration).apiV1TtsGroupsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {TtsSynthesisRequestDTO} [ttsSynthesisRequestDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options) {
        return (0, exports.TtsApiFp)(this.configuration).apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ListOptions} [showOptions]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsVoicesGet(showOptions, options) {
        return (0, exports.TtsApiFp)(this.configuration).apiV1TtsVoicesGet(showOptions, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TtsApi = TtsApi;
//# sourceMappingURL=tts-api.js.map