"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfilerApi = void 0;
const axios_1 = __importDefault(require("axios"));
const errors = __importStar(require("../errors"));
const log_1 = require("../log");
const base = __importStar(require("./base"));
const api = __importStar(require("./generated/profiler"));
const models = __importStar(require("./generated/profiler"));
const formatRequest = ({ applicationId, start, end, applicationName, createdTime, }) => ({
    applicationId,
    start: start.toISOString(),
    end: end.toISOString(),
    clustersNumber: undefined,
    clusterAlgorithm: models.ClusterAlgorithmEnum.DbscanWithEdge,
    applicationName: applicationName,
    createdTime: createdTime === null || createdTime === void 0 ? void 0 : createdTime.toISOString(),
});
class ProfilerApi extends base.Api {
    constructor(account, log) {
        super(api.ProfilerApi, account, log);
    }
    async generate(req, cancelToken) {
        const cancelSource = axios_1.default.CancelToken.source();
        cancelToken === null || cancelToken === void 0 ? void 0 : cancelToken._onCancel(this.log, () => cancelSource.cancel());
        const response = await this.api.apiV1ProfilerRequestPost(formatRequest(req), {
            cancelToken: cancelSource.token,
        });
        return response.data;
    }
    async download(req, cancelToken, onProgress) {
        const isBrowser = await Promise.resolve().then(() => __importStar(require("env-paths"))).then(() => false).catch(() => true);
        const options = formatRequest(req);
        const cancelSource = axios_1.default.CancelToken.source();
        cancelToken === null || cancelToken === void 0 ? void 0 : cancelToken._onCancel(this.log, () => cancelSource.cancel());
        const { data, headers } = await this.api.apiV1ProfilerDownloadGet(options.start, options.end, options.applicationId, options.applicationName, options.createdTime, options.clustersNumber, options.clusterAlgorithm, {
            // progress does not work in nodejs, so it need only for websdk
            onDownloadProgress: (e) => onProgress === null || onProgress === void 0 ? void 0 : onProgress(e.loaded, e.total || e.loaded),
            responseType: isBrowser ? "arraybuffer" : "stream",
            cancelToken: cancelSource.token,
        });
        if (data instanceof ArrayBuffer) {
            return new Uint8Array(data);
        }
        // For nodesdk we use stream and check progress chunk by chunk
        return new Promise((resolve, reject) => {
            const stream = data;
            const tempTotal = parseInt(headers["content-length"]);
            const total = Number.isNaN(tempTotal) ? undefined : tempTotal;
            const buff = [];
            let loaded = 0;
            stream.on("data", (chunk) => {
                loaded += chunk.length;
                onProgress === null || onProgress === void 0 ? void 0 : onProgress(loaded, total !== null && total !== void 0 ? total : loaded);
                buff.push(chunk);
            });
            stream.on("error", reject);
            stream.on("end", () => {
                const b = Buffer.concat(buff);
                const array = new Uint8Array(b.buffer, b.byteOffset, b.byteLength / Uint8Array.BYTES_PER_ELEMENT);
                resolve(array);
            });
        });
    }
    async isAvailableToDownload(req, cancelToken) {
        const cancelSource = axios_1.default.CancelToken.source();
        cancelToken === null || cancelToken === void 0 ? void 0 : cancelToken._onCancel(this.log, () => cancelSource.cancel());
        const options = formatRequest(req);
        const { data: status } = await this.api.apiV1ProfilerStatusGet(options.start, options.end, options.applicationId, options.applicationName, options.createdTime, options.clustersNumber, options.clusterAlgorithm, { cancelToken: cancelSource.token });
        if (status === models.ProfilerStatusCode.Failed) {
            (0, log_1.logAndThrow)(this.log, new errors.ProfilerDataFailedError(req));
        }
        return status === models.ProfilerStatusCode.Done;
    }
}
exports.ProfilerApi = ProfilerApi;
//# sourceMappingURL=profiler.js.map