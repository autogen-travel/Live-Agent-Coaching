"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageContentApi = exports.PackageContentApiFactory = exports.PackageContentApiFp = exports.PackageContentApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PackageContentApi - axios parameter creator
 * @export
 */
const PackageContentApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} packageVersionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentByVersionPackageVersionIdContentGet: async (packageVersionId, options = {}) => {
            // verify required parameter 'packageVersionId' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentByVersionPackageVersionIdContentGet', 'packageVersionId', packageVersionId);
            const localVarPath = `/api/v1/packages/content/by-version/{packageVersionId}/content`
                .replace(`{${"packageVersionId"}}`, encodeURIComponent(String(packageVersionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} packageVersionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentByVersionPackageVersionIdGet: async (packageVersionId, options = {}) => {
            // verify required parameter 'packageVersionId' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentByVersionPackageVersionIdGet', 'packageVersionId', packageVersionId);
            const localVarPath = `/api/v1/packages/content/by-version/{packageVersionId}`
                .replace(`{${"packageVersionId"}}`, encodeURIComponent(String(packageVersionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} packageVersionId
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentByVersionPackageVersionIdListGet: async (packageVersionId, skip, take, options = {}) => {
            // verify required parameter 'packageVersionId' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentByVersionPackageVersionIdListGet', 'packageVersionId', packageVersionId);
            const localVarPath = `/api/v1/packages/content/by-version/{packageVersionId}/list`
                .replace(`{${"packageVersionId"}}`, encodeURIComponent(String(packageVersionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} packageVersionId
         * @param {string} description
         * @param {File} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentByVersionPackageVersionIdPost: async (packageVersionId, description, body, options = {}) => {
            // verify required parameter 'packageVersionId' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentByVersionPackageVersionIdPost', 'packageVersionId', packageVersionId);
            // verify required parameter 'description' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentByVersionPackageVersionIdPost', 'description', description);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentByVersionPackageVersionIdPost', 'body', body);
            const localVarPath = `/api/v1/packages/content/by-version/{packageVersionId}`
                .replace(`{${"packageVersionId"}}`, encodeURIComponent(String(packageVersionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} packageName
         * @param {string} packageVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentContentGet: async (packageName, packageVersion, options = {}) => {
            // verify required parameter 'packageName' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentContentGet', 'packageName', packageName);
            // verify required parameter 'packageVersion' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentContentGet', 'packageVersion', packageVersion);
            const localVarPath = `/api/v1/packages/content/content`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (packageName !== undefined) {
                localVarQueryParameter['packageName'] = packageName;
            }
            if (packageVersion !== undefined) {
                localVarQueryParameter['packageVersion'] = packageVersion;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} packageName
         * @param {string} packageVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentGet: async (packageName, packageVersion, options = {}) => {
            // verify required parameter 'packageName' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentGet', 'packageName', packageName);
            // verify required parameter 'packageVersion' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentGet', 'packageVersion', packageVersion);
            const localVarPath = `/api/v1/packages/content`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (packageName !== undefined) {
                localVarQueryParameter['packageName'] = packageName;
            }
            if (packageVersion !== undefined) {
                localVarQueryParameter['packageVersion'] = packageVersion;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} packageName
         * @param {string} packageVersion
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentListGet: async (packageName, packageVersion, skip, take, options = {}) => {
            // verify required parameter 'packageName' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentListGet', 'packageName', packageName);
            // verify required parameter 'packageVersion' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentListGet', 'packageVersion', packageVersion);
            const localVarPath = `/api/v1/packages/content/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (packageName !== undefined) {
                localVarQueryParameter['packageName'] = packageName;
            }
            if (packageVersion !== undefined) {
                localVarQueryParameter['packageVersion'] = packageVersion;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} packageContentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentPackageContentIdContentGet: async (packageContentId, options = {}) => {
            // verify required parameter 'packageContentId' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentPackageContentIdContentGet', 'packageContentId', packageContentId);
            const localVarPath = `/api/v1/packages/content/{packageContentId}/content`
                .replace(`{${"packageContentId"}}`, encodeURIComponent(String(packageContentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} packageContentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentPackageContentIdGet: async (packageContentId, options = {}) => {
            // verify required parameter 'packageContentId' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentPackageContentIdGet', 'packageContentId', packageContentId);
            const localVarPath = `/api/v1/packages/content/{packageContentId}`
                .replace(`{${"packageContentId"}}`, encodeURIComponent(String(packageContentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} packageName
         * @param {string} packageVersion
         * @param {string} description
         * @param {File} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentPost: async (packageName, packageVersion, description, body, options = {}) => {
            // verify required parameter 'packageName' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentPost', 'packageName', packageName);
            // verify required parameter 'packageVersion' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentPost', 'packageVersion', packageVersion);
            // verify required parameter 'description' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentPost', 'description', description);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesContentPost', 'body', body);
            const localVarPath = `/api/v1/packages/content`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (packageName !== undefined) {
                localVarQueryParameter['packageName'] = packageName;
            }
            if (packageVersion !== undefined) {
                localVarQueryParameter['packageVersion'] = packageVersion;
            }
            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PackageContentApiAxiosParamCreator = PackageContentApiAxiosParamCreator;
/**
 * PackageContentApi - functional programming interface
 * @export
 */
const PackageContentApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PackageContentApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} packageVersionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PackagesContentByVersionPackageVersionIdContentGet(packageVersionId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PackagesContentByVersionPackageVersionIdContentGet(packageVersionId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PackageContentApi.apiV1PackagesContentByVersionPackageVersionIdContentGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} packageVersionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PackagesContentByVersionPackageVersionIdGet(packageVersionId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PackagesContentByVersionPackageVersionIdGet(packageVersionId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PackageContentApi.apiV1PackagesContentByVersionPackageVersionIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} packageVersionId
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PackagesContentByVersionPackageVersionIdListGet(packageVersionId, skip, take, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PackagesContentByVersionPackageVersionIdListGet(packageVersionId, skip, take, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PackageContentApi.apiV1PackagesContentByVersionPackageVersionIdListGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} packageVersionId
         * @param {string} description
         * @param {File} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PackagesContentByVersionPackageVersionIdPost(packageVersionId, description, body, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PackagesContentByVersionPackageVersionIdPost(packageVersionId, description, body, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PackageContentApi.apiV1PackagesContentByVersionPackageVersionIdPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} packageName
         * @param {string} packageVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PackagesContentContentGet(packageName, packageVersion, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PackagesContentContentGet(packageName, packageVersion, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PackageContentApi.apiV1PackagesContentContentGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} packageName
         * @param {string} packageVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PackagesContentGet(packageName, packageVersion, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PackagesContentGet(packageName, packageVersion, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PackageContentApi.apiV1PackagesContentGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} packageName
         * @param {string} packageVersion
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PackagesContentListGet(packageName, packageVersion, skip, take, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PackagesContentListGet(packageName, packageVersion, skip, take, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PackageContentApi.apiV1PackagesContentListGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} packageContentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PackagesContentPackageContentIdContentGet(packageContentId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PackagesContentPackageContentIdContentGet(packageContentId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PackageContentApi.apiV1PackagesContentPackageContentIdContentGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} packageContentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PackagesContentPackageContentIdGet(packageContentId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PackagesContentPackageContentIdGet(packageContentId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PackageContentApi.apiV1PackagesContentPackageContentIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} packageName
         * @param {string} packageVersion
         * @param {string} description
         * @param {File} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PackagesContentPost(packageName, packageVersion, description, body, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PackagesContentPost(packageName, packageVersion, description, body, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PackageContentApi.apiV1PackagesContentPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PackageContentApiFp = PackageContentApiFp;
/**
 * PackageContentApi - factory interface
 * @export
 */
const PackageContentApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PackageContentApiFp)(configuration);
    return {
        /**
         *
         * @param {string} packageVersionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentByVersionPackageVersionIdContentGet(packageVersionId, options) {
            return localVarFp.apiV1PackagesContentByVersionPackageVersionIdContentGet(packageVersionId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} packageVersionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentByVersionPackageVersionIdGet(packageVersionId, options) {
            return localVarFp.apiV1PackagesContentByVersionPackageVersionIdGet(packageVersionId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} packageVersionId
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentByVersionPackageVersionIdListGet(packageVersionId, skip, take, options) {
            return localVarFp.apiV1PackagesContentByVersionPackageVersionIdListGet(packageVersionId, skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} packageVersionId
         * @param {string} description
         * @param {File} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentByVersionPackageVersionIdPost(packageVersionId, description, body, options) {
            return localVarFp.apiV1PackagesContentByVersionPackageVersionIdPost(packageVersionId, description, body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} packageName
         * @param {string} packageVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentContentGet(packageName, packageVersion, options) {
            return localVarFp.apiV1PackagesContentContentGet(packageName, packageVersion, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} packageName
         * @param {string} packageVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentGet(packageName, packageVersion, options) {
            return localVarFp.apiV1PackagesContentGet(packageName, packageVersion, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} packageName
         * @param {string} packageVersion
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentListGet(packageName, packageVersion, skip, take, options) {
            return localVarFp.apiV1PackagesContentListGet(packageName, packageVersion, skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} packageContentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentPackageContentIdContentGet(packageContentId, options) {
            return localVarFp.apiV1PackagesContentPackageContentIdContentGet(packageContentId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} packageContentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentPackageContentIdGet(packageContentId, options) {
            return localVarFp.apiV1PackagesContentPackageContentIdGet(packageContentId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} packageName
         * @param {string} packageVersion
         * @param {string} description
         * @param {File} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesContentPost(packageName, packageVersion, description, body, options) {
            return localVarFp.apiV1PackagesContentPost(packageName, packageVersion, description, body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PackageContentApiFactory = PackageContentApiFactory;
/**
 * PackageContentApi - object-oriented interface
 * @export
 * @class PackageContentApi
 * @extends {BaseAPI}
 */
class PackageContentApi extends base_1.BaseAPI {
    /**
     *
     * @param {string} packageVersionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentByVersionPackageVersionIdContentGet(packageVersionId, options) {
        return (0, exports.PackageContentApiFp)(this.configuration).apiV1PackagesContentByVersionPackageVersionIdContentGet(packageVersionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} packageVersionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentByVersionPackageVersionIdGet(packageVersionId, options) {
        return (0, exports.PackageContentApiFp)(this.configuration).apiV1PackagesContentByVersionPackageVersionIdGet(packageVersionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} packageVersionId
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentByVersionPackageVersionIdListGet(packageVersionId, skip, take, options) {
        return (0, exports.PackageContentApiFp)(this.configuration).apiV1PackagesContentByVersionPackageVersionIdListGet(packageVersionId, skip, take, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} packageVersionId
     * @param {string} description
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentByVersionPackageVersionIdPost(packageVersionId, description, body, options) {
        return (0, exports.PackageContentApiFp)(this.configuration).apiV1PackagesContentByVersionPackageVersionIdPost(packageVersionId, description, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentContentGet(packageName, packageVersion, options) {
        return (0, exports.PackageContentApiFp)(this.configuration).apiV1PackagesContentContentGet(packageName, packageVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentGet(packageName, packageVersion, options) {
        return (0, exports.PackageContentApiFp)(this.configuration).apiV1PackagesContentGet(packageName, packageVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentListGet(packageName, packageVersion, skip, take, options) {
        return (0, exports.PackageContentApiFp)(this.configuration).apiV1PackagesContentListGet(packageName, packageVersion, skip, take, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} packageContentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentPackageContentIdContentGet(packageContentId, options) {
        return (0, exports.PackageContentApiFp)(this.configuration).apiV1PackagesContentPackageContentIdContentGet(packageContentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} packageContentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentPackageContentIdGet(packageContentId, options) {
        return (0, exports.PackageContentApiFp)(this.configuration).apiV1PackagesContentPackageContentIdGet(packageContentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {string} description
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentPost(packageName, packageVersion, description, body, options) {
        return (0, exports.PackageContentApiFp)(this.configuration).apiV1PackagesContentPost(packageName, packageVersion, description, body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PackageContentApi = PackageContentApi;
//# sourceMappingURL=package-content-api.js.map