"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageVersionApi = exports.PackageVersionApiFactory = exports.PackageVersionApiFp = exports.PackageVersionApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PackageVersionApi - axios parameter creator
 * @export
 */
const PackageVersionApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} packageDescriptionId
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesVersionByNamePackageDescriptionIdListGet: async (packageDescriptionId, skip, take, options = {}) => {
            // verify required parameter 'packageDescriptionId' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesVersionByNamePackageDescriptionIdListGet', 'packageDescriptionId', packageDescriptionId);
            const localVarPath = `/api/v1/packages/version/by-name/{packageDescriptionId}/list`
                .replace(`{${"packageDescriptionId"}}`, encodeURIComponent(String(packageDescriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} packageName
         * @param {string} packageVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesVersionGet: async (packageName, packageVersion, options = {}) => {
            // verify required parameter 'packageName' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesVersionGet', 'packageName', packageName);
            // verify required parameter 'packageVersion' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesVersionGet', 'packageVersion', packageVersion);
            const localVarPath = `/api/v1/packages/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (packageName !== undefined) {
                localVarQueryParameter['packageName'] = packageName;
            }
            if (packageVersion !== undefined) {
                localVarQueryParameter['packageVersion'] = packageVersion;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} packageName
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesVersionListGet: async (packageName, skip, take, options = {}) => {
            // verify required parameter 'packageName' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesVersionListGet', 'packageName', packageName);
            const localVarPath = `/api/v1/packages/version/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (packageName !== undefined) {
                localVarQueryParameter['packageName'] = packageName;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} packageVersionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesVersionPackageVersionIdGet: async (packageVersionId, options = {}) => {
            // verify required parameter 'packageVersionId' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesVersionPackageVersionIdGet', 'packageVersionId', packageVersionId);
            const localVarPath = `/api/v1/packages/version/{packageVersionId}`
                .replace(`{${"packageVersionId"}}`, encodeURIComponent(String(packageVersionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {PackageVersionCreateOrUpdateDTO} packageVersionCreateOrUpdateDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesVersionPost: async (packageVersionCreateOrUpdateDTO, options = {}) => {
            // verify required parameter 'packageVersionCreateOrUpdateDTO' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesVersionPost', 'packageVersionCreateOrUpdateDTO', packageVersionCreateOrUpdateDTO);
            const localVarPath = `/api/v1/packages/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(packageVersionCreateOrUpdateDTO, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {PackageVersionPublishDTO} packageVersionPublishDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesVersionPublishPost: async (packageVersionPublishDTO, options = {}) => {
            // verify required parameter 'packageVersionPublishDTO' is not null or undefined
            (0, common_1.assertParamExists)('apiV1PackagesVersionPublishPost', 'packageVersionPublishDTO', packageVersionPublishDTO);
            const localVarPath = `/api/v1/packages/version/publish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            // authentication Bearer required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(packageVersionPublishDTO, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PackageVersionApiAxiosParamCreator = PackageVersionApiAxiosParamCreator;
/**
 * PackageVersionApi - functional programming interface
 * @export
 */
const PackageVersionApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PackageVersionApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} packageDescriptionId
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PackagesVersionByNamePackageDescriptionIdListGet(packageDescriptionId, skip, take, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PackagesVersionByNamePackageDescriptionIdListGet(packageDescriptionId, skip, take, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PackageVersionApi.apiV1PackagesVersionByNamePackageDescriptionIdListGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} packageName
         * @param {string} packageVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PackagesVersionGet(packageName, packageVersion, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PackagesVersionGet(packageName, packageVersion, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PackageVersionApi.apiV1PackagesVersionGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} packageName
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PackagesVersionListGet(packageName, skip, take, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PackagesVersionListGet(packageName, skip, take, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PackageVersionApi.apiV1PackagesVersionListGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} packageVersionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PackagesVersionPackageVersionIdGet(packageVersionId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PackagesVersionPackageVersionIdGet(packageVersionId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PackageVersionApi.apiV1PackagesVersionPackageVersionIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {PackageVersionCreateOrUpdateDTO} packageVersionCreateOrUpdateDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PackagesVersionPost(packageVersionCreateOrUpdateDTO, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PackagesVersionPost(packageVersionCreateOrUpdateDTO, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PackageVersionApi.apiV1PackagesVersionPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {PackageVersionPublishDTO} packageVersionPublishDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PackagesVersionPublishPost(packageVersionPublishDTO, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PackagesVersionPublishPost(packageVersionPublishDTO, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PackageVersionApi.apiV1PackagesVersionPublishPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PackageVersionApiFp = PackageVersionApiFp;
/**
 * PackageVersionApi - factory interface
 * @export
 */
const PackageVersionApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PackageVersionApiFp)(configuration);
    return {
        /**
         *
         * @param {string} packageDescriptionId
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesVersionByNamePackageDescriptionIdListGet(packageDescriptionId, skip, take, options) {
            return localVarFp.apiV1PackagesVersionByNamePackageDescriptionIdListGet(packageDescriptionId, skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} packageName
         * @param {string} packageVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesVersionGet(packageName, packageVersion, options) {
            return localVarFp.apiV1PackagesVersionGet(packageName, packageVersion, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} packageName
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesVersionListGet(packageName, skip, take, options) {
            return localVarFp.apiV1PackagesVersionListGet(packageName, skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} packageVersionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesVersionPackageVersionIdGet(packageVersionId, options) {
            return localVarFp.apiV1PackagesVersionPackageVersionIdGet(packageVersionId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {PackageVersionCreateOrUpdateDTO} packageVersionCreateOrUpdateDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesVersionPost(packageVersionCreateOrUpdateDTO, options) {
            return localVarFp.apiV1PackagesVersionPost(packageVersionCreateOrUpdateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {PackageVersionPublishDTO} packageVersionPublishDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PackagesVersionPublishPost(packageVersionPublishDTO, options) {
            return localVarFp.apiV1PackagesVersionPublishPost(packageVersionPublishDTO, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PackageVersionApiFactory = PackageVersionApiFactory;
/**
 * PackageVersionApi - object-oriented interface
 * @export
 * @class PackageVersionApi
 * @extends {BaseAPI}
 */
class PackageVersionApi extends base_1.BaseAPI {
    /**
     *
     * @param {string} packageDescriptionId
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageVersionApi
     */
    apiV1PackagesVersionByNamePackageDescriptionIdListGet(packageDescriptionId, skip, take, options) {
        return (0, exports.PackageVersionApiFp)(this.configuration).apiV1PackagesVersionByNamePackageDescriptionIdListGet(packageDescriptionId, skip, take, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageVersionApi
     */
    apiV1PackagesVersionGet(packageName, packageVersion, options) {
        return (0, exports.PackageVersionApiFp)(this.configuration).apiV1PackagesVersionGet(packageName, packageVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} packageName
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageVersionApi
     */
    apiV1PackagesVersionListGet(packageName, skip, take, options) {
        return (0, exports.PackageVersionApiFp)(this.configuration).apiV1PackagesVersionListGet(packageName, skip, take, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} packageVersionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageVersionApi
     */
    apiV1PackagesVersionPackageVersionIdGet(packageVersionId, options) {
        return (0, exports.PackageVersionApiFp)(this.configuration).apiV1PackagesVersionPackageVersionIdGet(packageVersionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {PackageVersionCreateOrUpdateDTO} packageVersionCreateOrUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageVersionApi
     */
    apiV1PackagesVersionPost(packageVersionCreateOrUpdateDTO, options) {
        return (0, exports.PackageVersionApiFp)(this.configuration).apiV1PackagesVersionPost(packageVersionCreateOrUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {PackageVersionPublishDTO} packageVersionPublishDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageVersionApi
     */
    apiV1PackagesVersionPublishPost(packageVersionPublishDTO, options) {
        return (0, exports.PackageVersionApiFp)(this.configuration).apiV1PackagesVersionPublishPost(packageVersionPublishDTO, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PackageVersionApi = PackageVersionApi;
//# sourceMappingURL=package-version-api.js.map