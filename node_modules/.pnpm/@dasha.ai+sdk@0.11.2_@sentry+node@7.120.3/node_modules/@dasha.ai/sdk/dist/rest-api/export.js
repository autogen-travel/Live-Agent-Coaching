"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportApi = void 0;
const base = __importStar(require("./base"));
const api = __importStar(require("./generated/core/api"));
class ExportApi extends base.Api {
    constructor(account, log) {
        super(api.ExportApi, account, log);
    }
    async get(take, skip, filters) {
        const response = await this.api.apiV1ExportJobsJsonPost(skip, take, {
            filters: filters
        }, {
            validateStatus: (status) => status < 400,
        });
        return response.data;
    }
    async getCsv(filters) {
        const isBrowser = await Promise.resolve().then(() => __importStar(require("env-paths"))).then(() => false).catch(() => true);
        const { data } = await this.api.apiV1ExportJobsCsvFilePost(undefined, undefined, undefined, {
            filters: filters
        }, {
            responseType: isBrowser ? "arraybuffer" : "stream",
            validateStatus: (status) => status < 400,
        });
        if (data instanceof ArrayBuffer) {
            return new Uint8Array(data);
        }
        // For nodesdk we use stream and check progress chunk by chunk
        return new Promise((resolve, reject) => {
            const stream = data;
            const buff = [];
            stream.on("data", (chunk) => {
                buff.push(chunk);
            });
            stream.on("error", reject);
            stream.on("end", () => {
                const b = Buffer.concat(buff);
                const array = new Uint8Array(b.buffer, b.byteOffset, b.byteLength / Uint8Array.BYTES_PER_ELEMENT);
                resolve(array);
            });
        });
    }
    async getFilters(filters, fillFilters) {
        const response = await this.api.apiV1ExportJobsFiltersPost({
            filters: filters,
            fillFilters: fillFilters
        }, {
            validateStatus: (status) => status < 400,
        });
        return response.data;
    }
}
exports.ExportApi = ExportApi;
//# sourceMappingURL=export.js.map