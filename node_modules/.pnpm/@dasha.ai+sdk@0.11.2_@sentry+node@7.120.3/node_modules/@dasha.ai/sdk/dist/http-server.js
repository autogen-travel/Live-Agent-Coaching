"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpServer = void 0;
exports.readGetSearchParams = readGetSearchParams;
exports.readPostParamsJson = readPostParamsJson;
const log_1 = require("./log");
const http_1 = __importDefault(require("http"));
const defaultHandler = (request, response) => {
    var _a;
    const requestUrl = new URL((_a = request.url) !== null && _a !== void 0 ? _a : "", `http://${request.headers.host}`);
    response.writeHead(501);
    response.write(`Method '${request.method}' '${requestUrl.pathname}' not found`);
    response.end();
};
function readGetSearchParams(request) {
    if (request.url === undefined || request.method === undefined) {
        throw new Error(`Unexpected error: received incoming message is response obtained from http.ClientRequest`);
    }
    const reqUrl = new URL(request.url, `http://${request.headers.host}`);
    const params = {};
    reqUrl.searchParams.forEach((value, key) => {
        params[key] = value;
    });
    return params;
}
async function readPostParamsJson(req) {
    return new Promise((resolve, reject) => {
        req.setEncoding("utf8");
        const chunks = [];
        req
            .on("data", async (chunk) => {
            chunks.push(chunk);
        })
            .on("end", () => {
            const body = chunks.join("");
            try {
                resolve(JSON.parse(body));
            }
            catch (e) {
                reject(e);
            }
        })
            .on("error", (e) => {
            reject(e);
        });
    });
}
class HttpServer extends http_1.default.Server {
    constructor(log) {
        super();
        this._router = {
            GET: {},
            POST: {},
        };
        this._descriptions = {
            GET: {},
            POST: {},
        };
        this.allowCors = false;
        this._log = log;
        this.on("request", this._requestListener);
    }
    get(route, listener, description) {
        this._router.GET[route] = listener;
        this._descriptions.GET[route] = description !== null && description !== void 0 ? description : "---";
        return this;
    }
    post(route, listener, description) {
        this._router.POST[route] = listener;
        this._descriptions.POST[route] = description !== null && description !== void 0 ? description : "---";
        return this;
    }
    getApiDescription() {
        return JSON.stringify(this._descriptions);
    }
    async _requestListener(request, response) {
        var _a;
        if (request.url === undefined || request.method === undefined) {
            return response
                .writeHead(400)
                .end("Unexpected error: request does not contain url anf method");
        }
        const requestUrl = new URL(request.url, `http://${request.headers.host}`);
        this._log.debug(`Got request ${request.method} '${requestUrl.pathname}'`);
        try {
            if (this.allowCors) {
                response.setHeader("Access-Control-Allow-Origin", "*");
                response.setHeader("Access-Control-Request-Method", "*");
                response.setHeader("Access-Control-Allow-Headers", "*");
                response.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS");
            }
            if (request.method === "OPTIONS") {
                response.writeHead(200).end();
                this._log.debug(`Response: ${response.statusMessage}`);
                return;
            }
            const handler = (_a = this._router[request.method][requestUrl.pathname]) !== null && _a !== void 0 ? _a : defaultHandler;
            await handler(request, response);
            this._log.debug(`Response: ${response.statusMessage}`);
            return;
        }
        catch (e) {
            (0, log_1.logAndReturn)(this._log, e);
            return response.writeHead(500).end(e.message);
        }
    }
}
exports.HttpServer = HttpServer;
//# sourceMappingURL=http-server.js.map