"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SingleConversation = void 0;
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const uuid = __importStar(require("uuid"));
const audio = __importStar(require("./audio"));
const errors = __importStar(require("./errors"));
const sip = __importStar(require("./sip"));
const log_1 = require("./log");
const transcription_1 = require("./transcription");
/** @internal */
class SingleConversation extends eventemitter3_1.default {
    constructor(application, input, log) {
        super();
        /** @internal */ this._dynamicTools = {};
        this.input = {};
        this.audio = audio._makeDefaultAudioConfig();
        this.sip = sip._makeDefaultSipConfig();
        this._started = false;
        this._running = false;
        this._completed = false;
        /** @internal */ this._jobKey = "__single_conversation:" + uuid.v4();
        this._transcriptionParser = new transcription_1.TranscriptionParser();
        this._transcription = [];
        this.log = log.child({
            label: `conv:${this._jobKey.slice(-6)}`,
            jobKey: this._jobKey,
        });
        this._application = application;
        if (input !== undefined)
            this.input = input;
        this._transcriptionParser.on("transcription", (transcription) => {
            this.emit("transcription", transcription);
            this._transcription.push(transcription);
        });
    }
    async sendEvent(eventName, eventValue) {
        if (this._completed) {
            throw new errors.Error("Can't send event after conversation has already been completed");
        }
        if (this._running) {
            await this._application._sendEvent(this._jobId, eventName, eventValue);
            return;
        }
        return new Promise((resolve, reject) => {
            const cleanup = () => {
                this.removeListener("_conversationCompleted", onCompleted);
                this.off("debugLog", checkRunning);
            };
            const onCompleted = () => {
                reject(new errors.Error("conversation completed before event could be sent"));
                cleanup();
            };
            const checkRunning = () => {
                if (this._running) {
                    this._application._sendEvent(this._jobId, eventName, eventValue)
                        .then(() => resolve())
                        .catch(reject);
                    cleanup();
                }
            };
            this.on("debugLog", checkRunning);
            this.once("_conversationCompleted", onCompleted);
        });
    }
    setDynamicToolRaw(options, handler) {
        if (this._started) {
            this.log.warn("Dynamic tool set after conversation has already been started is ignored");
            return Promise.resolve();
        }
        this._dynamicTools[options.name] = {
            description: options.description,
            name: options.name,
            schema: options.schema,
            handle: handler
        };
        return Promise.resolve();
    }
    setDynamicTool(options, handler) {
        if (this._started) {
            this.log.warn("Dynamic tool set after conversation has already been started is ignored");
            return Promise.resolve();
        }
        this._dynamicTools[options.name] = {
            description: options.description,
            name: options.name,
            schema: JSON.stringify(options.schema),
            handle: handler
        };
        return Promise.resolve();
    }
    get jobId() {
        return this._jobId;
    }
    get jobKey() {
        return this._jobKey;
    }
    async execute(options) {
        var _a, _b;
        if (this._started) {
            (0, log_1.logAndThrow)(this.log, new errors.Error("conversation has already been started"));
        }
        this._started = true;
        this.log.info("conversation starting");
        this.log.info(`jobKey: ${this._jobKey}`);
        this._application.queue._ignore(this._jobKey);
        let configName;
        let connection;
        if (this._application.connectionProvider !== undefined) {
            this.log.warn("connection providers are deprecated and will be removed in the future");
            connection = await this._application._executeConnectionProvider(this);
            connection._sessionConfig.tts = await this._application._executeTtsDispatcher(this);
            connection._sessionConfig.stt = await this._application._executeSttDispatcher(this);
            configName = (await this._application._addSessionConfig(connection._sessionConfig))
                .configName;
        }
        else {
            const executionOptions = { channel: (_a = options === null || options === void 0 ? void 0 : options.channel) !== null && _a !== void 0 ? _a : "audio" };
            configName = (await this._application._configureSession(this, executionOptions)).configName;
        }
        (_b = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _b === void 0 ? void 0 : _b._throwIfCanceled(this.log);
        return new Promise((resolve, reject) => {
            var _a, _b, _c;
            (_a = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _a === void 0 ? void 0 : _a._onCancel(this.log, reject);
            const unsubscribe = () => {
                this._application.off("_jobTimedOut", handleJobTimedOut);
                this._application.off("_jobRejected", handleJobRejected);
                this._application.off("_jobStarting", handleJobStarting);
                this._application.off("_jobFailed", handleJobFailed);
                this._application.off("_jobCompleted", handleJobCompleted);
                this._application.off("_jobRecordIdReady", handleJobRecordIdReady);
                this._application.off("_jobAdditionalInformation", handleJobAdditionalInformation);
                this._application.off("_jobEvent", handleJobEvent);
            };
            const handleJobTimedOut = (jobId, jobKey) => {
                if (jobKey !== this._jobKey)
                    return;
                unsubscribe();
                reject((0, log_1.logAndReturn)(this.log, new errors.TimeoutError("conversation timed out")));
            };
            const handleJobRejected = (jobId, jobKey, data) => {
                if (jobKey !== this._jobKey)
                    return;
                unsubscribe();
                reject((0, log_1.logAndReturn)(this.log, new errors.ConversationRejectedError(data, jobId, jobKey)));
            };
            const handleJobStarting = (jobId, jobKey) => {
                if (jobKey !== this._jobKey)
                    return;
                this._jobId = jobId;
                this.emit("_conversationStarting", this._application.applicationId, this._jobId, this.input);
                this.log.info(`jobId: ${jobId}`);
                this._application._bindConversation(jobId, this);
                connection === null || connection === void 0 ? void 0 : connection._init(jobId);
                this._application
                    ._acceptJob(jobId, { sessionConfigName: configName, data: this.input })
                    .then(() => {
                    this.log.info("conversation started");
                })
                    .catch((error) => {
                    unsubscribe();
                    reject(error);
                });
            };
            const handleJobFailed = (jobId, _jobKey, data) => {
                if (jobId !== this._jobId)
                    return;
                unsubscribe();
                reject((0, log_1.logAndReturn)(this.log, new errors.ConversationError(data)));
            };
            const handleJobCompleted = (jobId, _jobKey, data) => {
                var _a, _b, _c, _d;
                if (jobId !== this._jobId)
                    return;
                this._completed = true;
                unsubscribe();
                this.log.info("conversation complete");
                if (this._recordingUrl !== undefined) {
                    this.log.info(`recording available at ${this._recordingUrl}`);
                }
                if (this._recordingUrls !== undefined && this._recordingUrls.length > 0) {
                    this.log.info(`recordings available at ${this._recordingUrls.join(" ")}`);
                }
                const result = {
                    output: data,
                    transcription: this._transcription.sort((a, b) => +a.startTime - +b.startTime),
                    recordingUrl: this._recordingUrl,
                    recordingUrls: this._recordingUrls,
                    startTime: (_a = this._additionalInformation) === null || _a === void 0 ? void 0 : _a.jobStarted,
                    endTime: (_b = this._additionalInformation) === null || _b === void 0 ? void 0 : _b.jobEnded,
                    tracking: (_c = this._additionalInformation) === null || _c === void 0 ? void 0 : _c.tracking,
                    duration: (_d = this._additionalInformation) === null || _d === void 0 ? void 0 : _d.duration,
                };
                this.emit("_conversationCompleted", this._jobId, result);
                resolve(result);
            };
            const handleJobRecordIdReady = (jobId, recordId, recordIds) => {
                if (jobId !== this._jobId)
                    return;
                this._recordingUrl = this._application._getRecordingUrl(recordId);
                if (recordIds !== undefined) {
                    this._recordingUrls = recordIds.map((x) => this._application._getRecordingUrl(x));
                }
            };
            const handleJobAdditionalInformation = (jobId, data) => {
                if (jobId !== this._jobId)
                    return;
                this._additionalInformation = data;
            };
            const handleJobEvent = (jobId, jobEvent) => {
                if (jobId !== this._jobId)
                    return;
                this._running = true;
                const isObject = (x) => typeof x === "object" && x !== null;
                // a hack for https://gitlab.dasha.ai/dasha.ai/platform-team/platform/-/issues/821
                // TODO: a proper way to report #connect() errors to the application
                if (isObject(jobEvent) && isObject(jobEvent.msg)) {
                    if (jobEvent.msg.msgId === "FailedOpenSessionChannelMessage") {
                        const logDetails = { msg: jobEvent.msg };
                        this.log.warn(`#connect() call failed: ${jobEvent.msg.reason}`, logDetails);
                        this.log.warn(`${jobEvent.msg.details}`, logDetails);
                    }
                }
                this.emit("debugLog", jobEvent);
                this._transcriptionParser.push(jobEvent);
            };
            this._application.on("_jobTimedOut", handleJobTimedOut);
            this._application.on("_jobRejected", handleJobRejected);
            this._application.on("_jobStarting", handleJobStarting);
            this._application.on("_jobFailed", handleJobFailed);
            this._application.on("_jobCompleted", handleJobCompleted);
            this._application.on("_jobRecordIdReady", handleJobRecordIdReady);
            this._application.on("_jobAdditionalInformation", handleJobAdditionalInformation);
            this._application.on("_jobEvent", handleJobEvent);
            this._application
                ._enqueueJob(this._jobKey, {
                priority: 1,
                after: new Date(),
                before: (_b = options === null || options === void 0 ? void 0 : options.before) !== null && _b !== void 0 ? _b : new Date(Date.now() + 5 * 60 * 1000),
                input: (_c = this.input) !== null && _c !== void 0 ? _c : {}
            })
                .then(({ jobId }) => (this._jobId = jobId), (error) => {
                unsubscribe();
                reject(error);
            });
        });
    }
}
exports.SingleConversation = SingleConversation;
//# sourceMappingURL=conversation.js.map