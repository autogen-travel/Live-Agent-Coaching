"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultichannelChatManager = void 0;
exports.createMultichannelChat = createMultichannelChat;
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const grpc = __importStar(require("./grpc-api"));
const account_1 = require("./account");
const log_1 = require("./log");
/**
 * Create a {@link MultichannelChatManager} instance to use with a conversation.
 *
 * @param conversation a conversation to connect to
 * @param options.account Dasha account to use. Must be the same as the application's account.
 *   If not set, uses the {@link getCurrentAccountName | current account}.
 */
async function createMultichannelChat(conversation, options) {
    var _a;
    return new MultichannelChatManager((_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log })), conversation);
}
class MultichannelChat extends eventemitter3_1.default {
    constructor(textProtocolClient, channelId, jobId, sequenceId) {
        super();
        this._internalEvents = new eventemitter3_1.default();
        /** @internal */
        this._handleWait = () => {
            this.emit("gluedText", this._gluedText.trimEnd());
            this._gluedText = "";
        };
        this._textProtocolClient = textProtocolClient;
        this._channelId = channelId;
        this._jobId = jobId;
        this.sequenceId = sequenceId;
        this._gluedText = "";
    }
    /**
     * Send some text to the application.
     */
    async sendText(text) {
        await this._textProtocolClient.sendText({ jobId: this._jobId, text, channelId: this._channelId });
    }
    /**
     * Send some text and wait for response
     */
    async sendTextAndReceiveResponse(text) {
        this._internalEvents.emit("sendTextAndReceiveResponseCalled");
        const gluedPromise = new Promise((resolve, reject) => {
            this.once("gluedText", (text) => resolve(text));
            this._internalEvents.once("sendTextAndReceiveResponseCalled", () => resolve(""));
        });
        await this._textProtocolClient.sendText({ jobId: this._jobId, text, channelId: this._channelId });
        return await gluedPromise;
    }
    /**
     * Close the chat, notifying the application.
     */
    async close() {
        await this._textProtocolClient.sendClose({ jobId: this._jobId, channelId: this._channelId });
    }
    /** @internal */
    _handleText(text) {
        this.emit("text", text);
        if (text !== "") {
            this._gluedText = this._gluedText + text + "\n";
        }
    }
    /** @internal */
    _handleClose() {
        this.emit("close");
        this.close().catch((error) => this.emit("error", error));
    }
    /** @internal */
    _handleClosed() {
        this._handleWait();
        this.emit("closed");
    }
}
class MultichannelChatManager extends eventemitter3_1.default {
    /**
     * Create a {@link Chat} instance to use with an application.
     *
     * @param account Dasha account to use. Must be the same as the application's account.
     */
    constructor(account, conversation) {
        super();
        this.account = account;
        this._channelMap = new Map();
        this._handleText = (_jobId, text, channelidsList) => {
            var _a;
            if (channelidsList.length === 0) {
                for (const chat of this._channelMap.values()) {
                    chat._handleText(text);
                }
                return;
            }
            for (const channelId of channelidsList) {
                if (this._channelMap.has(channelId)) {
                    (_a = this._channelMap.get(channelId)) === null || _a === void 0 ? void 0 : _a._handleText(text);
                }
                return;
            }
        };
        this._handleClose = (_jobId, channelid) => {
            var _a;
            if (channelid === undefined) {
                for (const chat of this._channelMap.values()) {
                    chat._handleClose();
                }
                return;
            }
            if (this._channelMap.has(channelid)) {
                (_a = this._channelMap.get(channelid)) === null || _a === void 0 ? void 0 : _a._handleClose();
            }
        };
        this._handleErorr = (error) => {
            this._handleWait(this._jobId, undefined);
            this.emit("error", error);
        };
        this._handleWait = (_jobId, channelid) => {
            var _a;
            if (channelid === undefined) {
                for (const chat of this._channelMap.values()) {
                    chat._handleWait();
                }
                return;
            }
            if (this._channelMap.has(channelid)) {
                (_a = this._channelMap.get(channelid)) === null || _a === void 0 ? void 0 : _a._handleWait();
            }
        };
        this._handleClosed = (_jobId, channelid) => {
            var _a;
            if (channelid === undefined) {
                for (const chat of this._channelMap.values()) {
                    chat._handleClosed();
                }
                return;
            }
            if (this._channelMap.has(channelid)) {
                (_a = this._channelMap.get(channelid)) === null || _a === void 0 ? void 0 : _a._handleClosed();
            }
        };
        this._handleOpen = (_jobId, endpoint, channelid, sequenceId) => {
            if (!this._channelMap.has(channelid)) {
                this._channelMap.set(channelid, new MultichannelChat(this._textProtocolClient, channelid, this._jobId, sequenceId));
            }
            else {
                this._channelMap.get(channelid).sequenceId = sequenceId;
            }
            this.emit("open", endpoint, channelid);
        };
        conversation === null || conversation === void 0 ? void 0 : conversation.once("debugLog", async () => {
            await this._init(conversation._jobId);
        });
    }
    /** @internal */
    async _init(jobId) {
        this._jobId = jobId;
        this._textProtocolClient = await grpc.createMultichannelTextProtocolClient(this.account, log_1.log);
        this._messageStream = this._textProtocolClient.messageStream({ jobId });
        this._messageStream.on("error", this._handleErorr);
        this._messageStream.on("text", this._handleText);
        this._messageStream.on("close", this._handleClose);
        this._messageStream.on("closed", this._handleClosed);
        this._messageStream.on("open", this._handleOpen);
        this._messageStream.on("wait", this._handleWait);
    }
    async close() {
        for (const chat of this._channelMap.values()) {
            await chat.close();
        }
    }
    async sendOpen(channelId) {
        const chat = this._channelMap.get(channelId);
        await this._textProtocolClient.sendOpen({ jobId: this._jobId, channelId, sequenceId: chat.sequenceId });
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return this._channelMap.get(channelId);
    }
    async sendFailed(channelId) {
        const chat = this._channelMap.get(channelId);
        await this._textProtocolClient.sendFailed({ jobId: this._jobId, channelId, sequenceId: chat.sequenceId });
    }
}
exports.MultichannelChatManager = MultichannelChatManager;
//# sourceMappingURL=multichannel-chat.js.map