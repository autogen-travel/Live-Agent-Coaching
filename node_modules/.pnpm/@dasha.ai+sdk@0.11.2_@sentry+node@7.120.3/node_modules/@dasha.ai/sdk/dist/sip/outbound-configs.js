"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteConfig = deleteConfig;
exports.createConfig = createConfig;
exports.listConfigs = listConfigs;
exports.getConfigByName = getConfigByName;
exports.updateConfig = updateConfig;
const account_1 = require("../account");
const log_1 = require("../log");
const errors = __importStar(require("../errors"));
const rest = __importStar(require("../rest-api"));
function toOutboundConfig(dto, log) {
    var _a, _b, _c, _d;
    if (dto.transport !== "tcp" && dto.transport !== "udp") {
        (0, log_1.logAndThrow)(log, new errors.InternalError(`unexpected SIP transport: ${dto.transport}`));
    }
    return {
        server: dto.server,
        domain: (_a = dto.domain) !== null && _a !== void 0 ? _a : undefined,
        transport: dto.transport,
        account: dto.account,
        sourceIps: (_b = dto.sourceIPs) !== null && _b !== void 0 ? _b : undefined,
        fromUser: (_c = dto.fromUser) !== null && _c !== void 0 ? _c : undefined,
        cps: (_d = dto.cps) !== null && _d !== void 0 ? _d : undefined
    };
}
/**
 * Delete an outbound SIP config from the Dasha platform.
 *
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 * @param options.quiet if true, does not complain if the config does not exist
 */
async function deleteConfig(name, options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.SipOutboundApi(account, log);
    await api.deleteConfig(name, options);
}
/**
 * Create a new outbound SIP config.
 *
 * @param config see {@link OutboundConfig}
 * @param config.password authorization password, if one is needed
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns a newly created config
 */
// TODO: document config.password
async function createConfig(name, config, options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.SipOutboundApi(account, log);
    const newConfig = await api.createConfig({ ...config, name });
    return toOutboundConfig(newConfig, log);
}
/**
 * List all outbound SIP configs available to an account.
 *
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns a dictionary of {@link OutboundConfig} objects by their name
 */
async function listConfigs(options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.SipOutboundApi(account, log);
    const configs = await api.listConfigs();
    const entries = configs.map((config) => [config.name, toOutboundConfig(config, log)]);
    return Object.fromEntries(entries);
}
/**
 * Get outbound SIP config by name
 *
 * @param name an config name
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns {@link OutboundConfig} object
 */
async function getConfigByName(name, options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.SipOutboundApi(account, log);
    const config = await api.getConfigByName(name);
    return toOutboundConfig(config, log);
}
/**
 * Update an outbound SIP config. Pass `null` in the optional fields to reset to defaults.
 *
 * @param patch see {@link OutboundConfig}
 * @param patch.password authorization password, if one is needed
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns an updated config
 */
// TODO: document patch.password
async function updateConfig(name, patch, options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await (0, account_1._getEffectiveAccount)({ _log: log_1.log }));
    const log = log_1.log.child({ account: (0, account_1.anonymizeAccount)(account) });
    const api = new rest.SipOutboundApi(account, log);
    const config = await api.updateConfig(name, patch);
    return toOutboundConfig(config, log);
}
//# sourceMappingURL=outbound-configs.js.map