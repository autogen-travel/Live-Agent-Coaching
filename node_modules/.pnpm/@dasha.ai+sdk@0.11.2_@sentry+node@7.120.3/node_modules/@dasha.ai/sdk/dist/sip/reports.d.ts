import { Account } from "../account";
export interface SIPReportResponse {
    /**
     *
     * @type {string}
     * @memberof SIPReportResponse
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof SIPReportResponse
     */
    fromUser?: string | null;
    /**
     *
     * @type {string}
     * @memberof SIPReportResponse
     */
    fromDomain?: string | null;
    /**
     *
     * @type {string}
     * @memberof SIPReportResponse
     */
    toUser?: string | null;
    /**
     *
     * @type {string}
     * @memberof SIPReportResponse
     */
    toDomain?: string | null;
    /**
     *
     * @type {number}
     * @memberof SIPReportResponse
     */
    sipStatusCode?: number;
    /**
     *
     * @type {string}
     * @memberof SIPReportResponse
     */
    sipReason?: string | null;
    /**
     *
     * @type {string}
     * @memberof SIPReportResponse
     */
    srcIp?: string | null;
    /**
     *
     * @type {string}
     * @memberof SIPReportResponse
     */
    sipCallId?: string | null;
    /**
     *
     * @type {string}
     * @memberof SIPReportResponse
     */
    jobId?: string | null;
    /**
     *
     * @type {string}
     * @memberof SIPReportResponse
     */
    customerId?: string | null;
    /**
     *
     * @type {string}
     * @memberof SIPReportResponse
     */
    createdTime?: string;
    /**
     *
     * @type {string}
     * @memberof SIPReportResponse
     */
    sipEndpointId?: string | null;
}
export declare function getInboundCalls(fromDate: string | undefined, toDate: string | undefined, fromStatus: number | undefined, toStatus: number | undefined, skip: number, take: number, options?: {
    account?: Account;
}): Promise<SIPReportResponse[]>;
export interface EndpointStatus {
    status: string;
    isError: boolean;
}
export declare function getEndpointStatus(endpointId: string, errorThreshold: number | undefined, options?: {
    account?: Account;
}): Promise<EndpointStatus>;
