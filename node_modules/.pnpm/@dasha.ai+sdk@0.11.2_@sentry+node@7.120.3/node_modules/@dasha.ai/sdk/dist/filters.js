"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobStatusesFilter = exports.StartedTimeFilter = exports.DateRangeFilter = exports.TimeStampRangeFilter = exports.IdsFilter = exports.JobIdsFilter = exports.CustomerIdsFilter = exports.UsageSubTypesFilter = exports.UsageTypesFilter = exports.EventTypeFilter = exports.ApplicationNamesFilter = void 0;
const models = __importStar(require("./rest-api/generated/core/models"));
class ApplicationNamesFilter {
    constructor(appNames) {
        this.type = models.FilterName.ApplicationNames;
        this.values = [];
        this.values = appNames;
    }
}
exports.ApplicationNamesFilter = ApplicationNamesFilter;
class EventTypeFilter {
    constructor(eventTypes) {
        this.type = models.FilterName.EventTypes;
        this.values = [];
        this.values = eventTypes;
    }
}
exports.EventTypeFilter = EventTypeFilter;
class UsageTypesFilter {
    constructor(usageTypes) {
        this.type = models.FilterName.UsageTypes;
        this.values = [];
        this.values = usageTypes;
    }
}
exports.UsageTypesFilter = UsageTypesFilter;
class UsageSubTypesFilter {
    constructor(usageSubTypes) {
        this.type = models.FilterName.UsageSubTypes;
        this.values = [];
        this.values = usageSubTypes;
    }
}
exports.UsageSubTypesFilter = UsageSubTypesFilter;
class CustomerIdsFilter {
    constructor(customerIds) {
        this.type = models.FilterName.CustomerIds;
        this.values = [];
        this.values = customerIds;
    }
}
exports.CustomerIdsFilter = CustomerIdsFilter;
class JobIdsFilter {
    constructor(jobIds) {
        this.type = models.FilterName.JobIds;
        this.values = [];
        this.values = jobIds;
    }
}
exports.JobIdsFilter = JobIdsFilter;
class IdsFilter {
    constructor(ids) {
        this.type = models.FilterName.Ids;
        this.values = [];
        this.values = ids;
    }
}
exports.IdsFilter = IdsFilter;
const convertDateOnly = (d, time = undefined) => {
    if (d === undefined || d === null) {
        return undefined;
    }
    const month = (d.getMonth() + 1).toString().padStart(2, "0");
    const day = d.getDate().toString().padStart(2, "0");
    if (time === undefined) {
        return `${d.getFullYear()}-${month}-${day}`;
    }
    return `${d.getFullYear()}-${month}-${day}T${time}`;
};
class TimeStampRangeFilter {
    constructor(startDate, endDate) {
        this.type = models.FilterName.TimeStamps;
        this.startDate = startDate;
        this.endDate = endDate;
    }
    static fromDate(startDate, endDate, timezoneoffset = "") {
        return new TimeStampRangeFilter(convertDateOnly(startDate, "00:00:00" + timezoneoffset), convertDateOnly(endDate, "23:59:59.999" + timezoneoffset));
    }
}
exports.TimeStampRangeFilter = TimeStampRangeFilter;
class DateRangeFilter {
    constructor(startDate, endDate) {
        this.type = models.FilterName.DateRange;
        this.startDate = convertDateOnly(startDate);
        this.endDate = convertDateOnly(endDate);
    }
}
exports.DateRangeFilter = DateRangeFilter;
class StartedTimeFilter {
    convert(d) {
        if (d === undefined || d === null) {
            return undefined;
        }
        return d.toISOString();
    }
    constructor(startDateTime, endDateTime) {
        this.type = models.FilterName.StartedTime;
        this.startedTime = this.convert(startDateTime);
        this.endTime = this.convert(endDateTime);
    }
}
exports.StartedTimeFilter = StartedTimeFilter;
class JobStatusesFilter {
    constructor(taskStatus) {
        this.type = models.FilterName.JobStatuses;
        this.values = [];
        this.values = taskStatus;
    }
}
exports.JobStatusesFilter = JobStatusesFilter;
//# sourceMappingURL=filters.js.map