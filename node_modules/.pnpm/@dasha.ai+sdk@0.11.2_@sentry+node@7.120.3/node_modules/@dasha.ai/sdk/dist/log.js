"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = exports.Logger = void 0;
exports.logAndThrow = logAndThrow;
exports.logAndReturn = logAndReturn;
exports.enableSentryTransport = enableSentryTransport;
exports.disableSentryTransport = disableSentryTransport;
// polyfill for web sdk, winston use setImmediate
require("setimmediate");
const winston_1 = __importDefault(require("winston"));
const errors = __importStar(require("./errors"));
var winston_2 = require("winston");
Object.defineProperty(exports, "Logger", { enumerable: true, get: function () { return winston_2.Logger; } });
/**
 * A global logger instance.
 *
 * All logger instances are [winston] loggers.
 *
 * [winston]: https://npmjs.com/winston
 */
exports.log = winston_1.default.createLogger({
    level: process.env.DASHA_LOG_LEVEL || "info",
});
// TODO: winston.format.errors is not defined in browser? Why?
if (winston_1.default.format.errors) {
    // https://github.com/winstonjs/logform/issues/100#issuecomment-744318235
    exports.log.format = winston_1.default.format.errors({ stack: exports.log.isDebugEnabled() });
}
exports.log.add(new winston_1.default.transports.Console({
    format: winston_1.default.format.combine(winston_1.default.format.colorize(), winston_1.default.format.timestamp(), winston_1.default.format.printf(({ timestamp, label, level, message, stack, service, streamName }) => {
        const servicePrint = service ? `[${service}]` : "";
        const streamPrint = streamName ? `[${streamName}]` : "";
        return `${timestamp} [${label !== null && label !== void 0 ? label : "sdk"}]${servicePrint}${streamPrint} ${level} ${stack !== null && stack !== void 0 ? stack : message}`;
    })),
}));
function logAndThrow(log, error) {
    log.error(error);
    throw error;
}
function logAndReturn(log, error) {
    log.error(error);
    return error;
}
async function enableSentryTransport() {
    const { default: SentryTransport } = await Promise.resolve().then(() => __importStar(require("winston-transport-sentry-node"))).catch(() => {
        logAndThrow(exports.log, new errors.OptionalDependencyNotFoundError("winston-transport-sentry-node"));
    });
    const { getProxyForUrl } = await Promise.resolve().then(() => __importStar(require("proxy-from-env")));
    if (exports.log.transports.some((t) => t instanceof SentryTransport)) {
        return;
    }
    const dsn = "https://d59ab8bd2df644049e9c0520fc79ca91@sentry.dev.az.dasha.ai/28";
    const options = {
        sentry: {
            dsn: dsn,
            proxy: getProxyForUrl(dsn) || undefined,
        },
        level: 'error'
    };
    exports.log.add(new SentryTransport(options));
    exports.log.info("error reporting is enabled", { label: "sdk" });
}
function disableSentryTransport() {
    Promise.resolve().then(() => __importStar(require("winston-transport-sentry-node"))).catch(() => {
        logAndThrow(exports.log, new errors.OptionalDependencyNotFoundError("winston-transport-sentry-node"));
    })
        .then((module) => {
        const SentryTransport = module.default;
        const transport = exports.log.transports.find((t) => t instanceof SentryTransport);
        if (transport === undefined)
            return;
        exports.log.remove(transport);
        exports.log.info("error reporting is disabled", { label: "sdk" });
    });
}
//# sourceMappingURL=log.js.map