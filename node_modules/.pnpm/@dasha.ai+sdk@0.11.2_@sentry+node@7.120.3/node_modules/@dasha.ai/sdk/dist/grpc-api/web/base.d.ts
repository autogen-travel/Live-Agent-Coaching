import EventEmitter from "eventemitter3";
import * as grpc from "grpc-web";
import { Logger } from "../../log";
import { Account } from "../../account";
import * as errors from "../../errors";
export declare class Stream<TEvents extends EventEmitter.ValidEventTypes, TGrpcStream extends grpc.ClientReadableStream<unknown> = grpc.ClientReadableStream<unknown>> extends EventEmitter<TEvents> {
    protected _grpcStream: TGrpcStream;
    private isEnd;
    private isStatusError;
    private isError;
    private isCanceled;
    logger: Logger;
    constructor(init: (self: Stream<TEvents>) => TGrpcStream, logger: Logger);
    cancel(): void;
    healthCheck(): boolean;
    enrichLoggerMeta(meta: any): void;
}
export declare abstract class Client<TImpl> {
    private account;
    protected log: Logger;
    protected grpcClient: TImpl;
    constructor(Client: new (server: string) => TImpl, account: Account, log: Logger);
    private mapMetadata;
    close(): void;
    enrichLoggerMeta(meta: any): void;
    healthCheck(): boolean;
    protected wrapGrpcError(error: grpc.RpcError): errors.Error;
}
