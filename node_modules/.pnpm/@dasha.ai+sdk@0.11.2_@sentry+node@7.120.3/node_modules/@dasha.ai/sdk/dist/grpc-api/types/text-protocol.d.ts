import * as errors from "../../errors";
import { IStream, IClient } from "./base";
export type MessageStream = IStream<{
    error: [error: errors.Error];
    text: [jobId: string, text: string];
    close: [jobId: string];
    wait: [jobId: string];
}>;
export interface ITextProtocolClient extends IClient {
    sendText(request: {
        jobId: string;
        text: string;
    }): Promise<void>;
    sendClose(request: {
        jobId: string;
    }): Promise<void>;
    messageStream(request: {
        jobId: string;
    }): MessageStream;
}
export type MultichannelMessageStream = IStream<{
    error: [error: errors.Error];
    text: [jobId: string, text: string, channelidsList: string[]];
    close: [jobId: string, channelid: string];
    closed: [jobId: string, channelid: string | undefined];
    open: [jobId: string, endpoint: string, channelid: string, sequenceId: string];
    wait: [jobId: string, channelid: string];
}>;
export interface IMultichannelTextProtocolClient extends IClient {
    sendText(request: {
        jobId: string;
        text: string;
        channelId: string;
    }): Promise<void>;
    sendClose(request: {
        jobId: string;
        channelId: string;
    }): Promise<void>;
    sendOpen(request: {
        jobId: string;
        channelId: string;
        sequenceId: string;
    }): Promise<void>;
    sendFailed(request: {
        jobId: string;
        channelId: string;
        sequenceId: string;
    }): Promise<void>;
    messageStream(request: {
        jobId: string;
    }): MultichannelMessageStream;
}
