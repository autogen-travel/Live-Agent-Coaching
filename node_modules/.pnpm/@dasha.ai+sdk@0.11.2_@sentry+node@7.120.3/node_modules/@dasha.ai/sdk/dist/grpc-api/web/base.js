"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = exports.Stream = void 0;
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const grpc = __importStar(require("grpc-web"));
const log_1 = require("../../log");
const errors = __importStar(require("../../errors"));
class Stream extends eventemitter3_1.default {
    constructor(init, logger) {
        super();
        this.isEnd = false;
        this.isStatusError = false;
        this.isError = false;
        this.isCanceled = false;
        this.logger = logger;
        this._grpcStream = init(this);
        this._grpcStream.on("error", (error) => {
            this.logger.warn("Stream unhealthy. Got error.", { message: error.message, name: error.name });
            this.isError = true;
        });
        this._grpcStream.on("end", () => {
            this.logger.debug("Stream end.");
            this.isEnd = true;
        });
        this._grpcStream.on("status", (status) => {
            if (status.code !== grpc.StatusCode.OK) {
                this.logger.debug("Stream unhealthy. Got not OK status.", { status: status });
                this.isStatusError = true;
            }
        });
    }
    cancel() {
        this.removeAllListeners();
        this._grpcStream.cancel();
        this._grpcStream.on("error", () => void 0);
    }
    healthCheck() {
        const customHealth = !this.isCanceled && !this.isEnd && !this.isError && !this.isStatusError;
        if (customHealth) {
            this.logger.silly("Stream healthy.");
            return true;
        }
        this.logger.warn("Stream unhealthy.", {
            isCanceled: this.isCanceled,
            isEnd: this.isEnd,
            isError: this.isError,
            isStatusError: this.isStatusError,
        });
        return false;
    }
    enrichLoggerMeta(meta) {
        this.logger = this.logger.child({ ...this.logger.defaultMeta, ...meta });
    }
}
exports.Stream = Stream;
class Client {
    constructor(Client, account, log) {
        this.account = account;
        this.log = log;
        if (account.insecure === true) {
            this.grpcClient = this.mapMetadata(new Client("http://" + account.server));
        }
        else {
            this.grpcClient = this.mapMetadata(new Client("https://" + account.server));
        }
    }
    mapMetadata(client) {
        for (const prop in client) {
            const original = client[prop];
            if (typeof original !== "function") {
                continue;
            }
            client[prop] = ((...args) => {
                const meta = typeof args[1] === "object" ? args[1] : {};
                const override = new Map();
                if (this.account.customerId !== undefined) {
                    override.set("X-CustomerId", this.account.customerId);
                }
                args[1] = {
                    ...meta,
                    ...override,
                    "grpc.keepalive_time_ms": 10000,
                    'grpc.service_config': JSON.stringify({ loadBalancingConfig: [{ round_robin: {} }], }),
                    Authorization: "Bearer " + this.account.apiKey,
                };
                return original.call(client, ...args);
            });
        }
        return client;
    }
    close() {
        // It is not implemented in web-grpc
        // this.grpcClient.close();
    }
    enrichLoggerMeta(meta) {
        this.log = this.log.child({ ...this.log.defaultMeta, ...meta });
    }
    healthCheck() {
        this.log.silly("Channel healthy.");
        return true;
    }
    wrapGrpcError(error) {
        this.log.debug(error);
        switch (error.code) {
            case grpc.StatusCode.INVALID_ARGUMENT:
                return (0, log_1.logAndReturn)(this.log, new errors.ArgumentError(error.message));
            case grpc.StatusCode.PERMISSION_DENIED:
                return (0, log_1.logAndReturn)(this.log, new errors.PermissionError(error.message));
            case grpc.StatusCode.INTERNAL:
                if (error.message.includes("Received RST_STREAM with code 2") ||
                    error.message.includes("Received RST_STREAM with code 0") ||
                    error.message.includes("Failed to start HTTP/2 stream with error")) {
                    return (0, log_1.logAndReturn)(this.log, new errors.ConnectionError(error.message, error, true));
                }
                return (0, log_1.logAndReturn)(this.log, new errors.InternalError(error.message, error));
            case grpc.StatusCode.CANCELLED:
            case grpc.StatusCode.DEADLINE_EXCEEDED:
            case grpc.StatusCode.RESOURCE_EXHAUSTED:
            case grpc.StatusCode.ABORTED:
            case grpc.StatusCode.DATA_LOSS:
            case grpc.StatusCode.UNKNOWN:
            case grpc.StatusCode.UNAVAILABLE:
                return (0, log_1.logAndReturn)(this.log, new errors.ConnectionError(error.message, error, true));
            case grpc.StatusCode.UNAUTHENTICATED:
                return (0, log_1.logAndReturn)(this.log, new errors.AuthenticationError());
            default:
                return (0, log_1.logAndReturn)(this.log, new errors.InternalError(error.message, error));
        }
    }
}
exports.Client = Client;
//# sourceMappingURL=base.js.map