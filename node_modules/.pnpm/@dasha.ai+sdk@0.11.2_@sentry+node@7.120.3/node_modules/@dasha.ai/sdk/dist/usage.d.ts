import { Account } from "./account";
import { IFilter } from "./filters";
import { BillableUsageResponseDTO } from "./rest-api/generated/core";
export type BillableUsageEntity = BillableUsageResponseDTO;
export declare function getUsage(take: number | undefined, skip: number | undefined, filters: IFilter[] | undefined, options?: {
    account?: Account;
}): Promise<BillableUsageEntity[]>;
export declare function getUsageForJob(jobId: string, options?: {
    account?: Account;
}): Promise<BillableUsageEntity[] | undefined>;
export declare function getUsageFilters(filters: IFilter[] | undefined, fillFilters: IFilter[], options?: {
    account?: Account;
}): Promise<IFilter[]>;
export type AggregatedUsageEntity = Partial<BillableUsageEntity> & {
    billableUsage: number;
    count: number;
};
export declare const PossibleAggregationFields: Set<string>;
export declare function aggregateUsage(usages: BillableUsageEntity[], aggregationFields: Set<string>): AggregatedUsageEntity[];
