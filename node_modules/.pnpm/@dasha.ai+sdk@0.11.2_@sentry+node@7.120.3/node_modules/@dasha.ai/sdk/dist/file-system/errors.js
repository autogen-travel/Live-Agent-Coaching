"use strict";
/**
 * @module
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReadFileError = exports.CreateSymLinkError = exports.CreateFileError = exports.RemoveFileError = exports.RemoveDirectoryError = exports.CreateDirectoryError = exports.PathNotExistsError = void 0;
const errors_1 = require("../errors");
class PathNotExistsError extends errors_1.Error {
    constructor(path, reason) {
        super(`Path not exist: '${path}'. Reason: '${reason.message}'`, reason);
        this.path = path;
        this.reason = reason;
        this.name = "dasha.PathNotExists";
    }
}
exports.PathNotExistsError = PathNotExistsError;
class CreateDirectoryError extends errors_1.Error {
    constructor(path, reason) {
        super(`Unable create directory: '${path}'. Reason: '${reason.message}'`, reason);
        this.path = path;
        this.reason = reason;
        this.name = "dasha.CreateDirectory";
    }
}
exports.CreateDirectoryError = CreateDirectoryError;
class RemoveDirectoryError extends errors_1.Error {
    constructor(path, reason) {
        super(`Unable remove directory: '${path}'. Reason: '${reason.message}'`, reason);
        this.path = path;
        this.reason = reason;
        this.name = "dasha.RemoveDirectory";
    }
}
exports.RemoveDirectoryError = RemoveDirectoryError;
class RemoveFileError extends errors_1.Error {
    constructor(path, reason) {
        super(`Unable remove file: '${path}'. Reason: '${reason.message}'`, reason);
        this.path = path;
        this.reason = reason;
        this.name = "dasha.RemoveFile";
    }
}
exports.RemoveFileError = RemoveFileError;
class CreateFileError extends errors_1.Error {
    constructor(path, reason) {
        super(`Unable create file: '${path}'. Reason: '${reason.message}'`, reason);
        this.path = path;
        this.reason = reason;
        this.name = "dasha.CreateFile";
    }
}
exports.CreateFileError = CreateFileError;
class CreateSymLinkError extends errors_1.Error {
    constructor(pathFrom, pathTo, reason) {
        super(`Unable create symlink: from '${pathFrom}' to '${pathTo}'. Reason: '${reason.message}'`, reason);
        this.pathFrom = pathFrom;
        this.pathTo = pathTo;
        this.reason = reason;
        this.name = "dasha.CreateSymLink";
    }
}
exports.CreateSymLinkError = CreateSymLinkError;
class ReadFileError extends errors_1.Error {
    constructor(path, reason) {
        super(`Unable read file '${path}'. Reason: '${reason.message}'`, reason);
        this.path = path;
        this.reason = reason;
        this.name = "dasha.ReadFile";
    }
}
exports.ReadFileError = ReadFileError;
//# sourceMappingURL=errors.js.map