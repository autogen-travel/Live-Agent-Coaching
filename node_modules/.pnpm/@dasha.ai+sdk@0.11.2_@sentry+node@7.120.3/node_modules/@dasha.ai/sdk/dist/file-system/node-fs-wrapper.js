"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeFsWrapper = void 0;
const errors = __importStar(require("./errors"));
const log_1 = require("../log");
const fs_1 = require("fs");
class NodeFsWrapper {
    constructor(log) {
        this.canUseSymLink = true;
        this._log = log;
    }
    async writeFile(path, content, options) {
        await fs_1.promises.writeFile(path, content, options)
            .catch(x => (0, log_1.logAndThrow)(this._log, new errors.CreateFileError(path, x)));
    }
    async readFile(path, options) {
        var _a;
        return await fs_1.promises.readFile(path, {
            encoding: (_a = options === null || options === void 0 ? void 0 : options.encoding) !== null && _a !== void 0 ? _a : 'utf8',
            flag: options === null || options === void 0 ? void 0 : options.flag
        }).catch(x => (0, log_1.logAndThrow)(this._log, new errors.ReadFileError(path, x)));
    }
    async mkdir(path, options) {
        await fs_1.promises.mkdir(path, { recursive: options.recursive })
            .catch(x => (0, log_1.logAndThrow)(this._log, new errors.CreateDirectoryError(path, x)));
    }
    async rmdir(path, options) {
        await fs_1.promises.rmdir(path, { recursive: options.recursive })
            .catch(x => (0, log_1.logAndThrow)(this._log, new errors.RemoveDirectoryError(path, x)));
    }
    async unlink(path) {
        await fs_1.promises.unlink(path)
            .catch(x => (0, log_1.logAndThrow)(this._log, new errors.RemoveFileError(path, x)));
    }
    async stat(path) {
        const result = await fs_1.promises.stat(path).catch(_ => undefined);
        if (result === undefined) {
            return undefined;
        }
        return { isDirectory: result.isDirectory(), isFile: result.isFile(), isSymbolicLink: result.isSymbolicLink() };
    }
    async symlink(sourcePath, destanationPath) {
        await fs_1.promises.symlink(sourcePath, destanationPath, 'junction')
            .catch(x => (0, log_1.logAndThrow)(this._log, new errors.CreateSymLinkError(sourcePath, destanationPath, x)));
    }
    async dirlength(path) {
        return (await fs_1.promises.readdir(path).catch(x => (0, log_1.logAndThrow)(this._log, new errors.ReadFileError(path, x)))).length;
    }
    async rmLogged(path) {
        this._log.silly(`Removing file system object with path '${path}'`);
        const stat = await this.stat(path);
        if (stat === undefined) {
            this._log.debug(`File system object with path '${path}' not exist`);
            return;
        }
        if (stat.isSymbolicLink || stat.isFile) {
            await this.unlink(path);
        }
        else if (stat.isDirectory) {
            await this.rmdir(path, { recursive: true });
        }
        this._log.silly(`Removed file system object with path '${path}'`);
    }
    async mkdirLogged(path) {
        this._log.silly(`Creating directory with path '${path}'`);
        await this.mkdir(path, { recursive: true });
        this._log.silly(`Created directory with path '${path}'`);
    }
}
exports.NodeFsWrapper = NodeFsWrapper;
//# sourceMappingURL=node-fs-wrapper.js.map