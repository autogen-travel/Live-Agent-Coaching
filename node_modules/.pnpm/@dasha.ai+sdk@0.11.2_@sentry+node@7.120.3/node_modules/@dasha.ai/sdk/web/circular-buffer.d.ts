export declare class CircularBuffer<T> {
    private readonly _capacity;
    private _size;
    private _leftIdx;
    private _rightIdx;
    private _data;
    readonly _evictedCallback: (element: T) => void;
    constructor(capacity: number, evictedCallback?: (element: T) => void);
    capacity(): number;
    size(): number;
    isEmpty(): boolean;
    isFull(): boolean;
    pushFront(element: T): boolean;
    toArray(): T[];
    data(): Array<T | undefined>;
    /**
     * Resets currently stored data with provided array, regarding to current capacity.
     * Note: current capacity will not be changed
     * Note: all previous data will be erased, but the 'evictedCallback()' function will not be called for erased items
     * @param newData new data to store
     * @param pushFrontLike if true, the data will be set in the same order as it would be pushed by @method pushFront,
     *    otherwise, the data will be pushed as it would be done by @method pushBack
     */
    resetData(newData: T[], pushFrontLike?: boolean): void;
    private increaseIdx;
}
