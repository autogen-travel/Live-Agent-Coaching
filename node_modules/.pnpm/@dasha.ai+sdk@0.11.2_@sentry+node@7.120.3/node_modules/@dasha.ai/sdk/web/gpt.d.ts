import { Account } from "./account";
export interface GptEmulateRequest {
    /**
     *
     * @type {Array<any>}
     * @memberof GptEmulateRequest
     */
    debugLog: Array<any>;
    /**
     *
     * @type {string}
     * @memberof GptEmulateRequest
     */
    prompt: string;
    /**
     *
     * @type {string}
     * @memberof GptEmulateRequest
     */
    emulatedInstanceId: string;
    /**
     *
     * @type {{ [key: string]: string | undefined; }}
     * @memberof GptEmulateRequest
     */
    options: {
        [key: string]: string | undefined;
    };
    /**
     *
     * @type {{ [key: string]: any | undefined; }}
     * @memberof GptEmulateRequest
     */
    functions: {
        [key: string]: any | undefined;
    };
    /**
     *
     * @type {{ [key: string]: string | undefined; }}
     * @memberof GptEmulateRequest
     */
    promptArguments?: {
        [key: string]: string | undefined;
    } | null;
}
export interface TextHistoryMessage {
    type: "Text";
    text: string;
    thinking: string | undefined;
    source: number;
}
export interface FunctionCallMessage {
    type: "call";
    functionCallName: string;
    functionCallArgs: Record<string, unknown>;
}
export interface WarningCallMessage {
    type: "Warning";
    message: string;
}
export interface FunctionCallResponseMessage {
    type: "callResponse";
    functionCallName: string;
    functionCallResult: any;
    request: FunctionCallMessage;
    callId: string;
}
export type IHistoryMessage = TextHistoryMessage | FunctionCallMessage | WarningCallMessage | FunctionCallResponseMessage;
/**
 *
 * @export
 * @interface GptSingleEmulatedResponse
 */
export interface GptSingleEmulatedResponse {
    /**
     *
     * @type {Array<IHistoryMessage>}
     * @memberof GptSingleEmulatedResponse
     */
    gptResponse?: Array<IHistoryMessage> | null;
    /**
     *
     * @type {string}
     * @memberof GptSingleEmulatedResponse
     */
    error?: string | null;
}
/**
 * Run gpt emulation for existing dialog
 *
 * @param info.maxConcurrency maximum total number of concurrent conversation allowed
 *   for all applications in a group
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
*/
export declare function runGptEmulation(request: GptEmulateRequest, count: number, options?: {
    account?: Account;
}): Promise<GptSingleEmulatedResponse[]>;
