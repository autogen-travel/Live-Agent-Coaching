/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { InstanceInformation } from '../models';
import type { LimitInformation } from '../models';
import type { LimitsDTO } from '../models';
import type { LimitsDiagnostic } from '../models';
import type { QueuesDTO } from '../models';
import type { QueuesDiagnostic } from '../models';
/**
 * DiagnosticsApi - axios parameter creator
 * @export
 */
export declare const DiagnosticsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerInstancesGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerLimitGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerQueueLengthGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerQueuesLengthsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} groupId
     * @param {string} applicationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdApplicationApplicationNameLimitGet: (groupId: string, applicationName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} groupId
     * @param {string} applicationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdApplicationApplicationNameQueueLengthGet: (groupId: string, applicationName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdLimitGet: (groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdQueueLengthGet: (groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdAllQueueLengthGet: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdGet: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdLimitGet: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdLimitsGet: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsLimitsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DiagnosticsApi - functional programming interface
 * @export
 */
export declare const DiagnosticsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerInstancesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InstanceInformation>>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerLimitGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LimitInformation>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerQueueLengthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerQueuesLengthsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueuesDTO>>;
    /**
     *
     * @param {string} groupId
     * @param {string} applicationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdApplicationApplicationNameLimitGet(groupId: string, applicationName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LimitInformation>>;
    /**
     *
     * @param {string} groupId
     * @param {string} applicationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdApplicationApplicationNameQueueLengthGet(groupId: string, applicationName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    /**
     *
     * @param {string} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdLimitGet(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LimitInformation>>;
    /**
     *
     * @param {string} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdQueueLengthGet(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdAllQueueLengthGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueuesDiagnostic>>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceInformation>>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdLimitGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LimitInformation>>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdLimitsGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LimitsDiagnostic>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsLimitsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LimitsDTO>>;
};
/**
 * DiagnosticsApi - factory interface
 * @export
 */
export declare const DiagnosticsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerInstancesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<InstanceInformation>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerLimitGet(options?: RawAxiosRequestConfig): AxiosPromise<LimitInformation>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerQueueLengthGet(options?: RawAxiosRequestConfig): AxiosPromise<number>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerQueuesLengthsGet(options?: RawAxiosRequestConfig): AxiosPromise<QueuesDTO>;
    /**
     *
     * @param {string} groupId
     * @param {string} applicationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdApplicationApplicationNameLimitGet(groupId: string, applicationName: string, options?: RawAxiosRequestConfig): AxiosPromise<LimitInformation>;
    /**
     *
     * @param {string} groupId
     * @param {string} applicationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdApplicationApplicationNameQueueLengthGet(groupId: string, applicationName: string, options?: RawAxiosRequestConfig): AxiosPromise<number>;
    /**
     *
     * @param {string} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdLimitGet(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<LimitInformation>;
    /**
     *
     * @param {string} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdQueueLengthGet(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<number>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdAllQueueLengthGet(instanceId: string, options?: RawAxiosRequestConfig): AxiosPromise<QueuesDiagnostic>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdGet(instanceId: string, options?: RawAxiosRequestConfig): AxiosPromise<InstanceInformation>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdLimitGet(instanceId: string, options?: RawAxiosRequestConfig): AxiosPromise<LimitInformation>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdLimitsGet(instanceId: string, options?: RawAxiosRequestConfig): AxiosPromise<LimitsDiagnostic>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsLimitsGet(options?: RawAxiosRequestConfig): AxiosPromise<LimitsDTO>;
};
/**
 * DiagnosticsApi - object-oriented interface
 * @export
 * @class DiagnosticsApi
 * @extends {BaseAPI}
 */
export declare class DiagnosticsApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsCustomerInstancesGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstanceInformation[], any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsCustomerLimitGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LimitInformation, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsCustomerQueueLengthGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsCustomerQueuesLengthsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<QueuesDTO, any>>;
    /**
     *
     * @param {string} groupId
     * @param {string} applicationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsGroupGroupIdApplicationApplicationNameLimitGet(groupId: string, applicationName: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LimitInformation, any>>;
    /**
     *
     * @param {string} groupId
     * @param {string} applicationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsGroupGroupIdApplicationApplicationNameQueueLengthGet(groupId: string, applicationName: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    /**
     *
     * @param {string} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsGroupGroupIdLimitGet(groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LimitInformation, any>>;
    /**
     *
     * @param {string} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsGroupGroupIdQueueLengthGet(groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsInstanceInstanceIdAllQueueLengthGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<QueuesDiagnostic, any>>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsInstanceInstanceIdGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstanceInformation, any>>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsInstanceInstanceIdLimitGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LimitInformation, any>>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsInstanceInstanceIdLimitsGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LimitsDiagnostic, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsLimitsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LimitsDTO, any>>;
}
