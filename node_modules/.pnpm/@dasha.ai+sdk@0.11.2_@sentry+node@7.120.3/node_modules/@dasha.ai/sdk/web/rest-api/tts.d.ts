import { Account } from "../account";
import { Logger } from "../log";
import * as base from "./base";
import * as api from "./generated/core/api";
import * as models from "./generated/core/models";
export interface CloneRequest {
    name: string;
    description: string;
    language: string;
    provider: models.TtsProvider;
    providerSpecific: {
        elevenLabs?: {
            removeBackgroundNoise?: boolean;
        };
        cartesia?: {
            mode?: "Stability" | "Similarity";
            enhance?: boolean;
            transcript?: string;
        };
    };
    labels: {
        [key: string]: string;
    };
}
export interface ClonePatchDto {
    name?: string;
    description?: string;
    language?: string;
    labels?: {
        [key: string]: string;
    };
}
export declare class TtsApi extends base.Api<api.TtsApi> {
    constructor(account: Account, log: Logger);
    synthesize(request: models.TtsSynthesisRequestDTO): Promise<Uint8Array>;
    cloneAsync(request: CloneRequest, audios?: Array<any>): Promise<models.TtsCloneResponseDto>;
    updateCloneAsync(id: string, dto: ClonePatchDto): Promise<models.TtsCloneResponseDto>;
    deleteCloneAsync(id: string): Promise<void>;
    listVoicesAsync(filter: models.ListOptions): Promise<models.TtsCloneResponseDto[]>;
}
