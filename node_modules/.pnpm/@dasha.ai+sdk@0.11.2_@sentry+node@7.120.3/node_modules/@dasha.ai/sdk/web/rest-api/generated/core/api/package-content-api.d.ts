/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { PackageContentDescriptionDTO } from '../models';
/**
 * PackageContentApi - axios parameter creator
 * @export
 */
export declare const PackageContentApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} packageVersionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentByVersionPackageVersionIdContentGet: (packageVersionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} packageVersionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentByVersionPackageVersionIdGet: (packageVersionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} packageVersionId
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentByVersionPackageVersionIdListGet: (packageVersionId: string, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} packageVersionId
     * @param {string} description
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentByVersionPackageVersionIdPost: (packageVersionId: string, description: string, body: File, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentContentGet: (packageName: string, packageVersion: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentGet: (packageName: string, packageVersion: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentListGet: (packageName: string, packageVersion: string, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} packageContentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentPackageContentIdContentGet: (packageContentId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} packageContentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentPackageContentIdGet: (packageContentId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {string} description
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentPost: (packageName: string, packageVersion: string, description: string, body: File, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PackageContentApi - functional programming interface
 * @export
 */
export declare const PackageContentApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} packageVersionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentByVersionPackageVersionIdContentGet(packageVersionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @param {string} packageVersionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentByVersionPackageVersionIdGet(packageVersionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackageContentDescriptionDTO>>;
    /**
     *
     * @param {string} packageVersionId
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentByVersionPackageVersionIdListGet(packageVersionId: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PackageContentDescriptionDTO>>>;
    /**
     *
     * @param {string} packageVersionId
     * @param {string} description
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentByVersionPackageVersionIdPost(packageVersionId: string, description: string, body: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackageContentDescriptionDTO>>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentContentGet(packageName: string, packageVersion: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentGet(packageName: string, packageVersion: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackageContentDescriptionDTO>>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentListGet(packageName: string, packageVersion: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PackageContentDescriptionDTO>>>;
    /**
     *
     * @param {string} packageContentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentPackageContentIdContentGet(packageContentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @param {string} packageContentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentPackageContentIdGet(packageContentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackageContentDescriptionDTO>>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {string} description
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentPost(packageName: string, packageVersion: string, description: string, body: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackageContentDescriptionDTO>>;
};
/**
 * PackageContentApi - factory interface
 * @export
 */
export declare const PackageContentApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} packageVersionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentByVersionPackageVersionIdContentGet(packageVersionId: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;
    /**
     *
     * @param {string} packageVersionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentByVersionPackageVersionIdGet(packageVersionId: string, options?: RawAxiosRequestConfig): AxiosPromise<PackageContentDescriptionDTO>;
    /**
     *
     * @param {string} packageVersionId
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentByVersionPackageVersionIdListGet(packageVersionId: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PackageContentDescriptionDTO>>;
    /**
     *
     * @param {string} packageVersionId
     * @param {string} description
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentByVersionPackageVersionIdPost(packageVersionId: string, description: string, body: File, options?: RawAxiosRequestConfig): AxiosPromise<PackageContentDescriptionDTO>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentContentGet(packageName: string, packageVersion: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentGet(packageName: string, packageVersion: string, options?: RawAxiosRequestConfig): AxiosPromise<PackageContentDescriptionDTO>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentListGet(packageName: string, packageVersion: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PackageContentDescriptionDTO>>;
    /**
     *
     * @param {string} packageContentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentPackageContentIdContentGet(packageContentId: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;
    /**
     *
     * @param {string} packageContentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentPackageContentIdGet(packageContentId: string, options?: RawAxiosRequestConfig): AxiosPromise<PackageContentDescriptionDTO>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {string} description
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PackagesContentPost(packageName: string, packageVersion: string, description: string, body: File, options?: RawAxiosRequestConfig): AxiosPromise<PackageContentDescriptionDTO>;
};
/**
 * PackageContentApi - object-oriented interface
 * @export
 * @class PackageContentApi
 * @extends {BaseAPI}
 */
export declare class PackageContentApi extends BaseAPI {
    /**
     *
     * @param {string} packageVersionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentByVersionPackageVersionIdContentGet(packageVersionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @param {string} packageVersionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentByVersionPackageVersionIdGet(packageVersionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackageContentDescriptionDTO, any>>;
    /**
     *
     * @param {string} packageVersionId
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentByVersionPackageVersionIdListGet(packageVersionId: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackageContentDescriptionDTO[], any>>;
    /**
     *
     * @param {string} packageVersionId
     * @param {string} description
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentByVersionPackageVersionIdPost(packageVersionId: string, description: string, body: File, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackageContentDescriptionDTO, any>>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentContentGet(packageName: string, packageVersion: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentGet(packageName: string, packageVersion: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackageContentDescriptionDTO, any>>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentListGet(packageName: string, packageVersion: string, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackageContentDescriptionDTO[], any>>;
    /**
     *
     * @param {string} packageContentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentPackageContentIdContentGet(packageContentId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @param {string} packageContentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentPackageContentIdGet(packageContentId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackageContentDescriptionDTO, any>>;
    /**
     *
     * @param {string} packageName
     * @param {string} packageVersion
     * @param {string} description
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageContentApi
     */
    apiV1PackagesContentPost(packageName: string, packageVersion: string, description: string, body: File, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PackageContentDescriptionDTO, any>>;
}
