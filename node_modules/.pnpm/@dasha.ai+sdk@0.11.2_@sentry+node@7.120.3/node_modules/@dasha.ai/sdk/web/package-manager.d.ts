import { Logger } from "./log";
import { Account } from "./account";
import { FileSystemWrapper } from "./file-system/file-system-wrapper";
import { DashaPackages } from "./json/generated/dasha-packages";
interface ProjectInformation {
    path: string;
    realStoragePath: string;
    content: DashaPackages;
    storagePath: string;
}
export declare function init(type: string, directory: string): Promise<void>;
export declare class PackageManger {
    private _account;
    private _log;
    private _descriptionApi;
    private _resolverApi;
    private _contentApi;
    private _fs;
    constructor(account: Account, log: Logger, fs: FileSystemWrapper);
    restoreDependecy(options: {
        directoryPath: string;
        force?: boolean;
    }): Promise<void>;
    restoreDependecyInternal(projectInfo: ProjectInformation, options: {
        force?: boolean;
    }): Promise<void>;
    addDependency(name: string, version: string, restriction: "==", options: {
        directoryPath: string;
    }): Promise<void>;
    removeDependency(name: string, options: {
        directoryPath: string;
    }): Promise<void>;
    private findPackageFile;
    private prepareInformation;
    private getDefaultPackageDirectory;
    private downloadPackages;
    private getPathsInformation;
    private downloadPackageInternal;
    private preparePackageDestanation;
    private prepareSymbolLinkDestanation;
    private createSymbolLink;
    private isNeedDownloadPackage;
    private getPackageRootDirectory;
}
export declare function createPackageManager(options?: {
    account?: Account;
}): Promise<PackageManger>;
export {};
