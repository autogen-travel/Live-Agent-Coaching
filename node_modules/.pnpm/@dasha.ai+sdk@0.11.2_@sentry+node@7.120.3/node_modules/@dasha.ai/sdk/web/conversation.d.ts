import EventEmitter from "eventemitter3";
import * as audio from "./audio";
import * as sip from "./sip";
import { CancelToken } from "./cancel";
import { Logger } from "./log";
import { Transcription } from "./transcription";
import { TrackingInformation } from "./grpc-api/types/processing";
import { Static, TSchema } from "@sinclair/typebox";
export interface DynamicToolScheme<T extends TSchema> {
    /**
     * The description of the tool.
     */
    description: string;
    /**
     * The schema of the tool.
     * @example
     * ```typescript
     * import { Type } from "@sinclair/typebox";
     * const schema = Type.Object({
     *   name: Type.String(),
     *   age: Type.Number()
     * })
     * ```
     */
    schema: T;
    /**
     * The name of the tool.
     */
    name: string;
}
export interface DynamicToolDescription {
    /**
     * The description of the tool.
     */
    description: string;
    /**
     * The schema of the tool.
     */
    schema: string;
    /**
     * The name of the tool.
     */
    name: string;
}
/**
 * A conversation between an {@link Application} and its conversational partner.
 */
export interface Conversation<TInput extends Record<string, unknown> = Record<string, unknown>, TOutput extends Record<string, unknown> = Record<string, unknown>> extends EventEmitter<{
    debugLog: [event: unknown];
    transcription: [transcription: Transcription];
}> {
    readonly log: Logger;
    readonly jobId: string;
    readonly jobKey: string;
    /**
     * The input data to be passed as the [input context] of a [DashaScript] application.
     *
     * [input context]: https://docs.dasha.ai/en-us/default/dasha-script-language/program-structure/#block-context
     * [DashaScript]: https://docs.dasha.ai/en-us/default/dasha-script-language/
     */
    input: TInput;
    audio: audio.AudioConfig;
    sip: sip.SipConfig;
    setDynamicTool<T extends TSchema>(options: DynamicToolScheme<T>, handler: (args: Partial<Static<T>>, conv: Conversation<TInput, TOutput>) => unknown): void;
    setDynamicToolRaw(options: DynamicToolDescription, handler: (args: Record<string, unknown>, conv: Conversation<TInput, TOutput>) => unknown): void;
    /**
     * Start a conversation, i.e. run the [DashaScript] code
     * on a specified {@link Conversation.input | input}.
     *
     * Returns a promise that settles when the conversation has finished.
     * It rejects on errors, and resolves on successful completion.
     */
    execute(options?: {
        /**
         * @default "audio"
         * */
        channel?: "audio" | "text";
        cancelToken?: CancelToken;
    }): Promise<ConversationResult<TOutput>>;
    sendEvent(eventName: string, eventValue: Record<string, string>): Promise<void>;
}
/**
 * The result of a successfully completed conversation.
 */
export interface ConversationResult<TOutput extends Record<string, unknown>> {
    /**
     * The [output context] of a [DashaScript] application.
     *
     * [output context]: https://docs.dasha.ai/en-us/default/dasha-script-language/program-structure/#block-context
     * [DashaScript]: https://docs.dasha.ai/en-us/default/dasha-script-language/
     */
    output: TOutput;
    /**
     * A full transcription of the conversation, sorted by phrase start time.
     */
    transcription: Transcription[];
    /**
     * A URL of the recording of a conversation, if one exists.
     */
    recordingUrl?: string;
    /**
     * A URLs of the recording of a conversation, if one exists.
     */
    recordingUrls?: string[];
    /**
     * A moment in time when the conversation was started. Not available for text chats.
     */
    startTime?: Date;
    /**
     * A moment in time when the conversation was ended. Not available for text chats.
     */
    endTime?: Date;
    /**
     * Sum durations of all channels connection. In milliseconds.
     */
    duration?: number;
    /**
     * Information about blocks duration, connections duration and connections types.
     */
    tracking?: TrackingInformation;
}
