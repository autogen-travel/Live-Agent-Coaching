import * as dasha from "@dasha.ai/sdk";
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
const envPath = join(__dirname, '.env');
dotenv.config({ path: envPath });

async function checkModels() {
  console.log("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π ===");
  
  const openAiApiKey = process.env.OPENAI_API_KEY;
  
  if (!openAiApiKey) {
    console.log("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
    return;
  }
  
  console.log("‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω:", openAiApiKey.substring(0, 10) + "...");
  
  // –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const modelsToCheck = [
    "openai/gpt-4o",
    "openai/gpt-4o-mini", 
    "openai/gpt-4-turbo",
    "openai/gpt-35-turbo",
    "openai/gpt-4",
    "openai/gpt-3.5-turbo"
  ];
  
  console.log("\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π...");
  
  for (const model of modelsToCheck) {
    try {
      console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å: ${model}`);
      
      const app = await dasha.deploy("./app", { 
        groupName: "Test",
        env: {
          OPENAI_API_KEY: openAiApiKey,
          DASHA_OPENAI_API_KEY: openAiApiKey
        }
      });
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —ç—Ç–æ–π –º–æ–¥–µ–ª—å—é
      const testConfig = {
        channel: "audio",
        openAiApiKey: openAiApiKey,
        openai_apikey: openAiApiKey,
        llmModel: model,
        openAiModel: model
      };
      
      console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${model} –¥–æ—Å—Ç—É–ø–Ω–∞`);
      
      await app.dispose();
      
    } catch (error) {
      if (error.message.includes("DeploymentNotFound")) {
        console.log(`‚ùå –ú–æ–¥–µ–ª—å ${model} –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –≤ Azure OpenAI`);
      } else if (error.message.includes("invalid_api_key")) {
        console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –¥–ª—è –º–æ–¥–µ–ª–∏ ${model}`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ ${model}: ${error.message}`);
      }
    }
  }
  
  console.log("\n=== –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ===");
  console.log("1. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å –≤ Azure OpenAI Studio");
  console.log("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–º—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ");
  console.log("3. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏: gpt-4o, gpt-4-turbo, gpt-35-turbo");
}

checkModels().catch(console.error);
